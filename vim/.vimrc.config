scriptencoding utf-8

" *.binと*.exeと*.dllはxxd
autocmd vimrc BufNewFile,BufRead *.{bin,exe,dll} setfiletype xxd

" *.cjsと*.jsと*.jsxと*.mjsと*.pacはJavaScript
autocmd vimrc BufNewFile,BufRead *.{cjs,js,jsx,mjs,pac} setfiletype javascript

" *.ctxと*.mtsと*.tsと*.tsxはTypeScript
autocmd vimrc BufNewFile,BufRead *.{cts,mts,ts,tsx} setfiletype typescript

if has('file_in_path')
  " gfで開く際に拡張子を補完する
  autocmd vimrc BufNewFile,BufRead *.{cjs,js,jsx,mjs,pac,ts,tsx}
        \ setlocal suffixesadd+=.tsx,.ts,.mjs,.cjs,.jsx,.js,.json,.pac
endif

" *.ftlはHTML
autocmd vimrc BufNewFile,BufRead *.ftl setfiletype html

" *.xulはXML
autocmd vimrc BufNewFile,BufRead *.xul setfiletype xml

function! s:set_filetype() abort
  " すでにfiletypeが指定されていたら終了
  if did_filetype()
    return
  endif

  let extension = expand('%:r:e')

  " 拡張子が取得できなかったら終了
  if empty(extension)
    return
  endif

  let filetypes = getcompletion(extension, 'filetype')

  " ファイルタイプが存在しなければ終了
  if empty(filetypes)
    return
  endif

  execute 'setlocal' 'filetype=' . filetypes[0]
endfunction

if exists('?getcompletion') || (has('nvim') && exists('*getcompletion'))
  autocmd vimrc BufNewFile,BufRead *.*.njk call <SID>set_filetype()
endif

" HTML編集時にシンタックスハイライトを400桁までに制限する
autocmd vimrc FileType html setlocal synmaxcol=400

" Makefile編集時のみタブにする
autocmd vimrc FileType make setlocal noexpandtab list tabstop=8 shiftwidth=8

" Python編集時のみインデントのスペース数を4にする
autocmd vimrc FileType python setlocal tabstop=4 shiftwidth=4

" Go言語 {{{

" Go編集時はタブにする
autocmd vimrc FileType go setlocal noexpandtab list tabstop=2 shiftwidth=2

" Go編集時にerrをハイライトする
" http://yuroyoro.hatenablog.com/entry/2014/08/12/144157
highlight goHighlight cterm=bold ctermfg=214
autocmd vimrc FileType go call matchadd('goHighlight', '\<\%(_\|err\)\>')

" Go編集時に末尾のセミコロンをハイライトする
highlight goSemicolon cterm=bold ctermfg=White ctermbg=Red
autocmd vimrc FileType go call matchadd('goSemicolon', ';\ze\s*$')

" }}}

" QuickFix {{{

" QuickFixを開いた時に簡単にプレビューをしたりする
" https://thinca.hatenablog.com/entry/20130708/1373210009
autocmd vimrc FileType qf nnoremap <buffer> p <CR>zz<C-w>p
" CtrlP相当
autocmd vimrc FileType qf nnoremap <buffer> <C-n> j
autocmd vimrc FileType qf nnoremap <buffer> <C-p> k

" }}}

" netrw {{{

" netrwでeやlを押したらCRと同じ動きにする
autocmd vimrc FileType netrw nmap <buffer> e <CR>
autocmd vimrc FileType netrw nmap <buffer> l <CR>
" netrwでhを押したら-と同じ動きにする
autocmd vimrc FileType netrw nmap <buffer> h -
" netrwでqを押したら閉じる
autocmd vimrc FileType netrw nnoremap <buffer><nowait><silent> q :<C-u>bwipeout!<CR>
" netrwでtを押したらツリーを閉じる
autocmd vimrc FileType netrw nmap <buffer><silent> t <Plug>NetrwTreeSqueeze
" netrwで<Space>を押したらマークする
autocmd vimrc FileType netrw nmap <buffer><expr> <Space> getline('.') == getline('$') ? 'mf' : 'mfj'
" netrwでMを押したらマークを外す
autocmd vimrc FileType netrw nmap <buffer> M mF
" netrwでドットファイルの表示・非表示を切り替える
autocmd vimrc FileType netrw nmap <buffer> . gh
" netrwで新しいファイルを作る
autocmd vimrc FileType netrw nmap <buffer> N %
" netrwで新しいディレクトリを作る
autocmd vimrc FileType netrw nmap <buffer> K d
" netrwで$HOMEに移動する
autocmd vimrc FileType netrw nmap <buffer><silent> ~ :<C-u>Explore $HOME<CR>
" netrwで/に移動する
autocmd vimrc FileType netrw nmap <buffer><silent> \ :<C-u>Explore /<CR>

" }}}

" ペーストモード {{{

" 挿入モードを開始したときにペーストモードのキーバインドを設定する
autocmd vimrc InsertEnter * setlocal pastetoggle=<C-t>
" 挿入モードから抜けるときにペーストモードを抜け、キーバインドも解除する
autocmd vimrc InsertLeave * setlocal nopaste pastetoggle=

" }}}

" コメント中の特定の単語を強調表示する
autocmd vimrc WinEnter,WinLeave,BufRead,BufNew *
      \ call matchadd('Todo', '\<\%(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\|NOTE\|INFO\|IDEA\)\>')

" ウィンドウを移動したらバッファ番号とフルパスを表示する
autocmd vimrc WinEnter * execute 'normal! 2\<C-g>'

" 全角スペースに下線を引く
highlight FullWidthSpace cterm=underline ctermfg=Blue
autocmd vimrc WinEnter,WinLeave,BufRead,BufNew * match FullWidthSpace /　/

" Markdown {{{

" Markdown編集時のみインデントのスペース数を4にする
autocmd vimrc FileType markdown setlocal tabstop=4 shiftwidth=4
" いくつかの拡張子をMarkdownとして開く
autocmd vimrc BufNewFile,BufRead *.{md,markdown,mkd,mdown,mkdn,mark} setfiletype markdown

" Jekyllのための保存時刻自動入力設定
" https://jekyllrb.com/docs/frontmatter/
"function! s:set_autodate_for_jekyll()
"  " バッファローカルなautodate.vimの設定
"  " http://nanasi.jp/articles/vim/autodate_vim.html
"  let b:autodate_lines = 5
"  let b:autodate_keyword_pre = 'date: '
"  let b:autodate_keyword_post = '$'
"  let b:autodate_format = '%Y-%m-%d %H:%M:%S'
"endfunction
" Markdownファイルを開いたときにだけ実行する
"autocmd vimrc BufNewFile,BufRead *.{md,markdown,mkd,mdown,mkdn,mark} call s:set_autodate_for_jekyll()

" }}}

" JavaScriptの著名なモジュールの設定ファイルをJSONとして開く
autocmd vimrc BufNewFile,BufRead .{babel,eslint,stylelint,swc,textlint}rc setfiletype json

" make,vimgrep,vimgrepaddを実行したらcopenをする
" grep,grepaddはCtrlPQuickfixを使用する
autocmd vimrc QuickfixCmdPost make,vimgrep,vimgrepadd copen

" vimdiffなどdiffをするときはカラースキームを変更する
" https://stackoverflow.com/a/2019401
autocmd vimrc FilterWritePre * if &diff | colorscheme industry | endif

" Terminal {{{

" ターミナルを開いたら行番号を表示しない
if has('nvim')
  autocmd vimrc TermOpen * setlocal nonumber norelativenumber
elseif has('terminal') && has('patch-8.1.2219')
  autocmd vimrc TerminalWinOpen * setlocal nonumber norelativenumber
endif

" ターミナルを開いたら挿入モードにする
if has('nvim')
  autocmd vimrc TermOpen * startinsert
endif

" }}}

if filereadable($VIMRUNTIME . '/macros/matchit.vim')
  " 標準添付されているmatchit.vimを読み込む
  autocmd vimrc VimEnter ++nested source $VIMRUNTIME/macros/matchit.vim
endif

"-------------------------------------------------------------------------------

" 論理行でなく表示行で移動する
nnoremap <silent> j gj
vnoremap <silent> j gj

nnoremap <silent> k gk
vnoremap <silent> k gk

"nnoremap <silent> $ g$
"vnoremap <silent> $ g$

"nnoremap <silent> ^ g^
"vnoremap <silent> ^ g^

"nnoremap <silent> 0 g0
"vnoremap <silent> 0 g0

" very magicをonにする
" http://deris.hatenablog.jp/entry/2013/05/15/024932
nnoremap / /\v
nnoremap ? ?\v

" / を入力した際の挙動を条件によって変更する
function! s:get_smart_very_magic() abort
  if getcmdtype() !=# ':'
    return '/'
  endif

  let cmd = getcmdline()
  let pos = getcmdpos()

  if
        \ (cmd ==#      's' && pos == 2) ||
        \ (cmd ==#     '%s' && pos == 3) ||
        \ (cmd ==# "'<,'>s" && pos == 7)
    " :s/ と入力したら :s/\v にする
    return '/\v'
  elseif
        \ (cmd ==#        's/\v' && pos ==  5) ||
        \ (cmd ==#       '%s/\v' && pos ==  6) ||
        \ (cmd ==# '''<,''>s/\v' && pos == 10)
    " :s// と入力したら :s/\v/ から :s// にする
    return "\<BS>\<BS>/"
  endif

  return '/'
endfunction

" very magicをonにする
cnoremap <expr> / <SID>get_smart_very_magic()

" diff系
nnoremap ,dg :<C-u>diffget<CR>
nnoremap ,do :<C-u>diffoff<CR>
nnoremap ,dO :<C-u>diffoff!<CR>
nnoremap ,dt :<C-u>diffthis<CR>
nnoremap ,du :<C-u>diffupdate<CR>

" F1を無効化
noremap <F1> <Nop>
noremap! <F1> <Nop>

" (, )でバッファの移動
nnoremap <silent> ( :<C-u>bprevious<CR>
nnoremap <silent> ) :<C-u>bnext<CR>

" バッファ番号とフルパスを表示する
nnoremap <C-g> 2<C-g>

" コマンドラインモードでEmacs風の移動ができるようにする
" http://cohama.hateblo.jp/entry/20130529/1369843236
cnoremap <C-a> <Home>
cnoremap <C-b> <Left>
cnoremap <C-d> <Del>
cnoremap <C-e> <End>
cnoremap <C-f> <Right>
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>
" cnoremap <M-b> <S-Left>
" cnoremap <M-f> <S-Right>

" grepをする
" based on https://zenn.dev/skanehira/articles/2020-09-18-vim-cexpr-quickfix
function! s:grep(word) abort
  cexpr system(printf('%s "%s"', &grepprg, a:word)) | cwin
endfunction
command! -nargs=1 Grep call <SID>grep(<q-args>)
nnoremap ,gr :<C-u>Grep<Space>

" C-kでオムニ補完
inoremap <C-k> <C-x><C-o>

" Tabで補完時に次の候補へ移動
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"

" S-Tabで補完時に前の候補へ移動
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Enterで補完時に決定
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"

if (exists('*dein#tap') && !dein#tap('vfiler.vim')) && 1
  if has('terminal') && executable('vifm')
    function! s:open_vifm() abort
      let terminal = [
            \   'terminal',
            \   '++close',
            \ ]

      " ウィンドウが2つ以上存在する場合はそのウィンドウで開く
      " ウィンドウが1つのときにVifmを終了するとVimも終了してしまうため
      if winnr('$') > 1
        call add(terminal, '++curwin')
      endif

      let command = [
            \   'vifm',
            \   expand('%:p:h'),
            \   expand('%:p:h'),
            \ ]

      " error from vint: unexpected token: -> (see vim-jp/vim-vimlparser)
      " execute terminal->join(' ') command->join(' ')
      execute join(terminal, ' ') join(command, ' ')
    endfunction

    nnoremap <silent> ,vf :<C-u>call <SID>open_vifm()<CR>
    nnoremap <silent> ,vF :<C-u>call <SID>open_vifm()<CR>
  else
    " ,vfでnetrwを開く
    function! s:open_netrw() abort
      " ls -lのような表示にする
      " 長いディレクトリが開けなくなるので付加情報を表示しない
      " let g:netrw_liststyle = 1
      let g:netrw_liststyle = 0
      " netrw
      Explore
    endfunction
    nnoremap <silent> ,vf :<C-u>call <SID>open_netrw()<CR>

    " ,vFでサイドバー風にnetrwを開く
    function! s:open_netrw_by_side() abort
      " ツリー表示にする
      let g:netrw_liststyle = 3
      " netrw
      Lexplore
    endfunction
    nnoremap <silent> ,vF :<C-u>call <SID>open_netrw_by_side()<CR>
  endif
endif

" QuickFixを更新する
" via: https://vi.stackexchange.com/a/13663
function! s:update_quickfix() abort
  let list = map(
        \   getqflist(),
        \   'extend(v:val, { "text" : get(getbufline(v:val.bufnr, v:val.lnum), 0) })'
        \ )
  call setqflist(list)
endfunction
command! -nargs=0 UpdateQuickFix call <SID>update_quickfix()

if exists(':Scratch') != 2
  command! -nargs=0 Scratch vertical new +setlocal\ buftype=nofile\ filetype=markdown\ noswapfile
endif

if executable('sudo') && executable('tee')
  " sudoを使って保存する
  command! -nargs=0 W execute 'w !sudo tee %'
endif

if has('terminal') || has('nvim')
  " ターミナルを開く
  nnoremap <silent> ,t :<C-u>terminal<CR>
  nnoremap <silent> ,T :<C-u>vertical terminal<CR>
endif

if exists('*dein#update')
  " ,nuでプラグインをアップデートする
  nnoremap ,nu :<C-u>call dein#update()<CR>
endif

" vim:ft=vim:fdm=marker:fen:
