" .vimrcを再読み込みする {{{
nnoremap ,w :<C-u>source $MYVIMRC<CR>
" }}}

" ghqの管理リポジトリにpecoでcdする {{{
function! ChangeDirectory() abort
  let l:directory = expand(system("ghq list -p | peco | tr -d '\n'"))

  redraw!

  if !isdirectory(l:directory)
    echoerr printf('"%s" is not a directory', l:directory)
    return
  endif

  execute 'cd' fnameescape(l:directory)
endfunction

nnoremap ,c :<C-u>call ChangeDirectory()<CR>
" }}}

" カレントディレクトリのリポジトリのファイルをpecoで開く {{{
function! OpenRepositoryFile() abort
  let l:directory = system("git rev-parse --show-toplevel | tr -d '\n'")

  if !isdirectory(l:directory)
    echoerr 'current directory is not within a git repository'
    return
  endif

  " サブディレクトリでもリポジトリのファイルが取得できるようパスを指定する
  let l:command = printf(
        \ "git ls-files -co --exclude-standard --full-name '%s' | peco",
        \ l:directory
        \ )

  let l:files = split(system(l:command), '\n')

  redraw!

  if len(l:files) == 0
    return
  endif

  for l:file in l:files
    execute 'edit' fnameescape(printf('%s/%s', l:directory, l:file))
  endfor
endfunction

nnoremap ,e :<C-u>call OpenRepositoryFile()<CR>
" }}}

" ghqの管理リポジトリを選択してからpecoでファイルを開く {{{
function! OpenRepositoryFileAfterSelectRepository() abort
  let l:directory = system("ghq list -p | peco | tr -d '\n'")

  if !isdirectory(l:directory)
    redraw!
    echoerr printf('"%s" is not a directory', l:directory)
    return
  endif

  " リポジトリ外から実行することがあるので--git-dirで指定する
  let l:command = printf(
        \ "git --git-dir='%s' ls-files -co --exclude-standard '%s' | peco",
        \ l:directory . '/.git',
        \ l:directory . '/'
        \ )

  let l:files = split(system(l:command), '\n')

  redraw!

  if len(l:files) == 0
    return
  endif

  for l:file in l:files
    execute 'edit' fnameescape(l:file)
  endfor
endfunction

nnoremap ,r :<C-u>call OpenRepositoryFileAfterSelectRepository()<CR>
" }}}

" vim:ft=vim:fdm=marker:fen:
