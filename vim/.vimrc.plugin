scriptencoding utf-8

" dein.vim {{{

if (v:version >= 704 || has('nvim')) && executable('git')

  let s:plugin_dir = $HOME . '/.vim/dein'
  let s:dein_repos = s:plugin_dir . '/repos/github.com/Shougo/dein.vim'

  if !isdirectory(s:dein_repos)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repos
  endif

  " NOTE:
  "   リセットしてしまうとkaoriyaのスクリプトが読み込まれない
  "   $VIM/vimrc を参照のこと
  "
  " リセットする
  " set runtimepath&

  " runtimepathに追加されていなかったら追加する
  if &runtimepath !~# s:dein_repos
    execute 'set' 'runtimepath+=' . s:dein_repos
  endif

  if dein#load_state(s:plugin_dir)
    call dein#begin(s:plugin_dir)

    " Shougo/dein.vim {{{
    function! s:hook_source_dein_vim() abort
      " ,nuでプラグインをアップデートする
      nnoremap ,nu :<C-u>call dein#update()<CR>
    endfunction

    call dein#add(s:dein_repos, {
          \ 'hook_source' : function('s:hook_source_dein_vim'),
          \ })
    " }}}

    " francoiscabrol/ranger.vim {{{
    function! s:hook_post_source_ranger() abort
      " ,vfで表示
      nnoremap ,vf :<C-u>Ranger<CR>
    endfunction

    function! s:hook_source_ranger() abort
      " netrwでなくrangerで処理をする
      let g:ranger_replace_netrw = 1
      " デフォルトのキーマップを使用しない
      let g:ranger_map_keys = 0
    endfunction

    call dein#add('rbgrouleff/bclose.vim', {
          \ 'lazy' : 1,
          \ 'on_if' : 'has("nvim")',
          \ })

    " bclose.vimを必要とするのはNeovimのみ
    let s:ranger_options = {
          \ 'depends' : [
          \   'bclose.vim'
          \ ],
          \ 'hook_post_source' : function('s:hook_post_source_ranger'),
          \ 'hook_source' : function('s:hook_source_ranger'),
          \ 'lazy' : 1,
          \ 'on_if' : 'executable("ranger") && has("nvim")',
          \ 'on_map' : [
          \   ',vf',
          \ ]
          \ }

    call dein#add('francoiscabrol/ranger.vim', s:ranger_options)
    " }}}

    " ctrlpvim/ctrlp.vim {{{
    function! s:hook_add_ctrlpvim_ctrlpvim() abort
      " <C-p>のコマンドを変更する
      let g:ctrlp_cmd = 'CtrlPMixed'

      " NOTE: https://kamiya555.github.io/2016/07/24/vim-ctrlp/
      " キャッシュディレクトリ
      let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
      " キャッシュを終了時に削除しない
      let g:ctrlp_clear_cache_on_exit = 0
      " 遅延再描画
      let g:ctrlp_lazy_update = 1
      " ルートパスと認識させるためのファイル
      let g:ctrlp_root_markers = ['Gemfile', 'package.json']

      " ドットで始まるファイルやディレクトリを表示する
      let g:ctrlp_show_hidden = 1
      " ウィンドウに関する設定
      let g:ctrlp_match_window = 'bottom,order:ttb,min:20,max:20,results:20'

      " スペースを無視する
      " https://github.com/ctrlpvim/ctrlp.vim/issues/196
      let g:ctrlp_abbrev = {
            \ 'gmode' : 'i',
            \ 'abbrevs' : [
            \   {
            \     'pattern' : ' ',
            \     'expanded' : '',
            \     'mode' : 'fprz',
            \   },
            \ ],
            \ }

      " 無視するディレクトリの正規表現の一部
      let l:ignore_dirs = 'bower_components|node_modules|vendor'
      " 無視するドットで始まるディレクトリの正規表現の一部
      let l:ignore_dot_dirs = 'git|hg|svn|bundle|sass-cache|node-gyp|cache'
      " 無視するファイルの正規表現の一部
      let l:ignore_files = 'exe|so|dll|bmp|gif|ico|jpe?g|png|webp|ai|psd'

      " 無視するファイルとディレクトリの設定
      let g:ctrlp_custom_ignore = {
            \ 'dir' : printf('\v[\/]%%(%%(%s)|\.%%(%s))$', l:ignore_dirs, l:ignore_dot_dirs),
            \ 'file' : printf('\v\.%%(%s)$', l:ignore_files),
            \ }

      " 外部コマンドを使うのでキャッシュしない
      let g:ctrlp_use_caching = 0

      " 外部コマンドを使って高速にファイルを列挙する
      let g:ctrlp_user_command = {
            \ 'types' : {
            \   1 : ['.git', 'cd %s && git ls-files -co --exclude-standard']
            \ },
            \ 'fallback' :
            \    executable('fd') ? 'fd --type f --color never %s' :
            \    executable('rg') ? 'rg --color never --smart-case %s' :
            \    executable('pt') ? 'pt --nocolor --nogroup --files-with-matches %s' :
            \   'find %s -type f'
            \ }

      " キーマッピングを変更する
      let g:ctrlp_prompt_mappings = {
            \ 'PrtSelectMove("j")' : ['<C-n>', '<Down>'],
            \ 'PrtSelectMove("k")' : ['<C-p>', '<Up>'],
            \ 'PrtHistory(-1)' : ['<C-j>'],
            \ 'PrtHistory(1)' : ['<C-k>'],
            \ 'YankLine()' : ['<C-y>'],
            \ 'CreateNewFile()' : [],
            \ }

      " CtrlPGrepを定義する
      command! -nargs=1 CtrlPGrep execute "silent! grep! '<args>' | redraw! | CtrlPQuickfix"

      " ,ubでバッファ一覧
      nnoremap ,ub :<C-u>CtrlPBuffer<CR>
      " ,ugでptを使ったgrepをする
      nnoremap ,ug :<C-u>CtrlPGrep<Space>
      " ,ulで行一覧
      nnoremap ,ul :<C-u>CtrlPLine<CR>
      " ,umで最近開いたファイル一覧
      nnoremap ,um :<C-u>CtrlPMRUFiles<CR>
    endfunction

    call dein#add('ctrlpvim/ctrlp.vim', {
          \ 'hook_add' : function('s:hook_add_ctrlpvim_ctrlpvim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : '<Plug>(CtrlP',
          \ 'on_if' : 'v:version >= 700',
          \ 'on_map' : '<C-p>',
          \ })
    " }}}

    " dense-analysis/ale {{{
    function! s:fix_with_eslint_plugin_prettier(dir) abort
      let l:node_modules_dir = finddir('node_modules', a:dir . ';')

      if l:node_modules_dir ==# ''
        return
      endif

      let l:eslint_plugin_prettier_dir = fnamemodify(l:node_modules_dir . '/eslint-plugin-prettier', ':p:h')

      if isdirectory(l:eslint_plugin_prettier_dir)
        let b:ale_fixers = {
              \ 'javascript' : ['eslint'],
              \ 'javascriptreact' : ['eslint'],
              \ 'javascript.jsx' : ['eslint'],
              \ 'typescript' : ['eslint'],
              \ 'typescriptreact' : ['eslint'],
              \ }
      endif
    endfunction

    function! s:fix_with_stylelint_prettier(dir) abort
    " let l:node_modules_dir = finddir('node_modules', a:dir . ';')

    " if l:node_modules_dir == ''
    "   return
    " endif

    " let l:stylelint_prettier_dir = fnamemodify(l:node_modules_dir . '/stylelint-prettier', ':p:h')

    " if isdirectory(l:stylelint_prettier_dir)
    "   let b:ale_fixers = {
    "         \ 'css' : ['stylelint'],
    "         \ 'scss' : ['stylelint'],
    "         \ }
    "   let b:ale_css_stylelint_options = '--fix'
    " endif
    endfunction

    function! s:hook_source_ale() abort
      " 無視するファイルの設定
      let g:ale_pattern_options = {
            \ '\.d\.ts$' : { 'ale_enabled' : 0 },
            \ '\.min\.js$' : { 'ale_enabled' : 0 }
            \ }
      " linterの設定
      let g:ale_linters = {
            \ 'css' : ['stylelint'],
            \ 'javascript' : ['eslint'],
            \ 'javascriptreact' : ['eslint'],
            \ 'javascript.jsx' : ['eslint'],
            \ 'json' : [],
            \ 'scss' : ['stylelint'],
            \ 'typescript' : ['tsserver', 'eslint'],
            \ 'typescriptreact' : ['tsserver', 'eslint'],
            \ 'vue' : ['eslint'],
            \ }
      " fixerの設定
      let g:ale_fixers = {
            \ 'css' : ['prettier'],
            \ 'javascript' : ['prettier'],
            \ 'javascriptreact' : ['prettier'],
            \ 'javascript.jsx' : ['prettier'],
            \ 'json' : ['prettier'],
            \ 'scss' : ['prettier'],
            \ 'typescript' : ['prettier'],
            \ 'typescriptreact' : ['prettier'],
            \ }

      " eslintでの検査中にエラーが多いときは中断する
      autocmd vimrc FileType javascript,javascriptreact,typescript,typescriptreact,vue let b:ale_javascript_eslint_options = '--max-warnings 20'

      " JSONならprettierのパーサにjson-stringifyを使用する
      autocmd vimrc FileType json let b:ale_javascript_prettier_options = '--parser json-stringify'

      " 保存時fixする
      autocmd vimrc FileType css,scss,json,javascript,javascriptreact,typescript,typescriptreact let b:ale_fix_on_save = 1

      " eslint-plugin-prettierやstylelint-prettierがインストールされていたらそちらをfixerとして使う
      "autocmd vimrc FileType css,scss call s:fix_with_stylelint_prettier(expand('%:p:h'))
      autocmd vimrc FileType javascript,javascriptreact,typescript,typescriptreact call s:fix_with_eslint_plugin_prettier(expand('%:p:h'))

      " ファイルのカレントディレクトリから実行する
      " monorepo毎に.eslintignoreがある場合などに有効
      " autocmd vimrc BufNewFile,BufRead * let b:ale_command_wrapper = printf("cd '%s' && %s", expand("%:p:h"), '%*')

      " エラーのある行に移動する
      nnoremap <silent> <C-j> :<C-u>ALENextWrap<CR>
      nnoremap <silent> <C-k> :<C-u>ALEPreviousWrap<CR>

      " 現在のバッファで有効・無効を切り替える
      nnoremap ,ad :<C-u>ALEDisableBuffer<CR>
      nnoremap ,ae :<C-u>ALEEnableBuffer<CR>
    endfunction

    call dein#add('dense-analysis/ale', {
          \ 'hook_source' : function('s:hook_source_ale'),
          \ 'on_if' : '(v:version >= 800 && has("timers") && has("job") && has("channel")) || has("nvim-0.2.0")',
          \ })
    " }}}

    " neoclide/coc.nvim {{{
    function! s:hook_post_source_coc_nvim() abort
      inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
      inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

      function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1] =~# '\s'
      endfunction

      inoremap <silent><expr> <C-k> coc#refresh()

      " Enterを押した時に候補を決定する
      if exists('*complete_info')
        inoremap <expr><CR> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
      else
        inoremap <expr><CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
      endif

      nmap <silent> [g <Plug>(coc-diagnostic-prev)
      nmap <silent> ]g <Plug>(coc-diagnostic-next)

      nmap <silent> gd <Plug>(coc-definition)
      nmap <silent> gy <Plug>(coc-type-definition)
      nmap <silent> gi <Plug>(coc-implementation)
      nmap <silent> gr <Plug>(coc-references)

      autocmd vimrc FileType javascript,javascriptreact,typescript,typescriptreact nmap <buffer><silent> <C-]> <Plug>(coc-definition)

      " CocInstall coc-json
      " CocInstall coc-tsserver
      " CocInstall coc-html
      " CocInstall coc-css
    endfunction

    function! s:hook_source_coc_nvim() abort
    endfunction

    call dein#add('neoclide/coc.nvim', {
          \ 'hook_post_source' : function('s:hook_post_source_coc_nvim'),
          \ 'hook_source' : function('s:hook_source_coc_nvim'),
          \ 'lazy' : 1,
          \ 'merged' : 0,
          \ 'on_if' : 'executable("node") && (v:version >= 800 || has("nvim-0.3.1"))',
          \ 'on_ft' : [
          \   'javascript',
          \   'javascriptreact',
          \   'json',
          \   'typescript',
          \   'typescriptreact',
          \ ],
          \ 'rev' : 'release'
          \ })
    " }}}

    " editorconfig/editorconfig-vim {{{
    call dein#add('editorconfig/editorconfig-vim', {
          \ 'on_if' : 'has("python") || has("python3")',
          \ })
    " }}}

    " junegunn/vim-easy-align {{{
    function! s:hook_post_source_vim_easy_align() abort
      " Start interactive EasyAlign in visual mode (e.g. vipga)
      xmap ga <Plug>(EasyAlign)
      " Start interactive EasyAlign for a motion/text object (e.g. gaip)
      nmap ga <Plug>(EasyAlign)
    endfunction

    call dein#add('junegunn/vim-easy-align', {
          \ 'hook_post_source' : function('s:hook_post_source_vim_easy_align'),
          \ })
    " }}}

    " itchyny/lightline.vim {{{
    call dein#add('itchyny/lightline.vim')
    " }}}

    " thinca/vim-quickrun {{{
    call dein#add('thinca/vim-quickrun', {
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'QuickRun',
          \   '<Plug>(quick',
          \ ],
          \ 'on_map' : '<Leader>r',
          \ })
    " }}}

    " thinca/vim-qfreplace {{{
    call dein#add('thinca/vim-qfreplace', {
          \ 'lazy' : 1,
          \ 'on_cmd' : 'Qfreplace',
          \ })
    " }}}

    " othree/eregex.vim {{{
    function! s:hook_source_eregex_vim() abort
      " キーマップの変更を行なわない
      let g:eregex_default_enable = 0
    endfunction

    call dein#add('othree/eregex.vim', {
          \ 'hook_source' : function('s:hook_source_eregex_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'E2v',
          \   'M',
          \   'S',
          \   'G',
          \   'G!',
          \   'V',
          \ ],
          \ 'on_func' : [
          \   'E2v',
          \ ],
          \ 'on_event' : 'CmdlineEnter'
          \ })
    " }}}

    " kana/vim-gf-user {{{
    function! GfImport() abort
      let path = expand('<cfile>')

      if path !~# '^\.\.\?'
        return 0
      endif

      let completions = [
            \   '.tsx',
            \   '.ts',
            \   '.mjs',
            \   '.cjs',
            \   '.jsx',
            \   '.js',
            \   '.json',
            \ ]

      let dir = simplify(expand('%:p:h') . '/' . path)

      for completion in completions
        let test = resolve(dir . completion)

        if filereadable(test)
          return {
                \ 'path' : test,
                \ 'line' : 0,
                \ 'col' : 0,
                \ }
        endif
      endfor

      return 0
    endfunction

    function! s:hook_post_source_vim_gf_user() abort
      call gf#user#extend('GfImport', 1000)
    endfunction

    call dein#add('kana/vim-gf-user', {
          \ 'lazy' : 1,
          \ 'hook_post_source' : function('s:hook_post_source_vim_gf_user'),
          \ 'on_ft' : [
          \   'javascript',
          \   'javascriptreact',
          \   'javascript.jsx',
          \   'typescript',
          \   'typescriptreact',
          \ ],
          \ })
    " }}}

    " kana/vim-operator-user {{{
    call dein#add('kana/vim-operator-user', {
          \ 'lazy' : 1,
          \ })
    " }}}

    " rhysd/vim-operator-surround {{{
    function! s:hook_source_vim_operator_surround() abort
      " map from https://github.com/rhysd/vim-operator-surround
      map <silent>sa <Plug>(operator-surround-append)
      map <silent>sd <Plug>(operator-surround-delete)
      map <silent>sr <Plug>(operator-surround-replace)
      nmap <silent>sbd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
      nmap <silent>sbr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
    endfunction

    " kana/vim-operator-userに依存している
    call dein#add('rhysd/vim-operator-surround', {
          \ 'depends' : [
          \   'vim-operator-user',
          \ ],
          \ 'hook_source' : function('s:hook_source_vim_operator_surround'),
          \ 'lazy' : 1,
          \ 'on_cmd' : '<Plug>(operator-surround-',
          \ 'on_map' : [
          \   'sa',
          \   'sd',
          \   'sr',
          \   'sbd',
          \   'sbr',
          \ ],
          \ })
    " }}}

    " tyru/operator-camelize.vim {{{
    function! s:hook_source_operator_camelize() abort
      vmap <silent>c <Plug>(operator-camelize)
      vmap <silent>_ <Plug>(operator-decamelize)
    endfunction

    " kana/vim-operator-userに依存している
    call dein#add('tyru/operator-camelize.vim', {
          \ 'depends' : [
          \   'vim-operator-user',
          \ ],
          \ 'hook_source' : function('s:hook_source_operator_camelize'),
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   '<Plug>(operator-camelize-',
          \   '<Plug>(operator-decamelize-',
          \ ],
          \ 'on_map' : [
          \   'c',
          \   '_',
          \ ],
          \ })
    " }}}

    " mattn/gist-vim {{{
    function! s:hook_add_gist_vim() abort
      nnoremap ,gd :<C-u>Gist -d<CR>
      nnoremap ,ge :<C-u>Gist -s<Space>
      nnoremap ,gf :<C-u>Gist -f<CR>
      nnoremap ,gl :<C-u>Gist -l<CR>
      nnoremap ,gmp :<C-u>Gist -m -p -s<Space>
      nnoremap ,gmP :<C-u>Gist -m -P -s<Space>
      nnoremap ,gp :<C-u>Gist -p -s<Space>
      nnoremap ,gP :<C-u>Gist -P -s<Space>
    endfunction

    function! s:hook_source_gist_vim() abort
      " 複数ファイルを取得する
      let g:gist_get_multiplefile = 1
    endfunction

    call dein#add('mattn/webapi-vim', {
          \ 'lazy' : 1,
          \ })
    call dein#add('mattn/gist-vim', {
          \ 'depends' : 'webapi-vim',
          \ 'hook_add' : function('s:hook_add_gist_vim'),
          \ 'hook_source' : function('s:hook_source_gist_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : 'Gist',
          \ })
    " }}}

    " tyru/open-browser.vim {{{
    function! s:hook_source_open_browser_vim() abort
      let g:netrw_nogx = 1
      nmap gx <Plug>(openbrowser-smart-search)
      vmap gx <Plug>(openbrowser-smart-search)
    endfunction

    call dein#add('tyru/open-browser.vim', {
          \ 'hook_source' : function('s:hook_source_open_browser_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'OpenBrowser',
          \   'OpenBrowserSearch',
          \   'OpenBrowserSmartSearch',
          \   '<Plug>(openbrowser-',
          \ ],
          \ 'on_map' : 'gx',
          \ })
    " }}}

    " vim-jp/vim-go-extra {{{
    function! s:hook_post_update_vim_go_extra() abort
      if !executable('golsp')
        execute '!go get -u golang.org/x/tools/cmd/golsp'
      endif
      if !executable('golint')
        execute '!go get -u golang.org/x/lint/golint'
      endif
    endfunction

    call dein#add('vim-jp/vim-go-extra', {
          \ 'hook_post_update' : function('s:hook_post_update_vim_go_extra'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'go',
          \ ],
          \ })
    " }}}

    " digitaltoad/vim-pug {{{
    call dein#add('digitaltoad/vim-pug', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'pug',
          \ ],
          \ })
    " }}}

    " hail2u/vim-css3-syntax {{{
    call dein#add('hail2u/vim-css3-syntax', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'css',
          \   'html',
          \   'scss',
          \ ],
          \ })
    " }}}

    " cespare/vim-toml {{{
    call dein#add('cespare/vim-toml', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'toml',
          \ ],
          \ })
    " }}}

    " othree/html5.vim {{{
    function! s:hook_add_html5_vim() abort
      " *.ejsと*.vueをのファイルタイプをHTMLとする
      autocmd vimrc BufNewFile,BufRead *.{ejs,vue} setlocal filetype=html
    endfunction

    call dein#add('othree/html5.vim', {
          \ 'hook_add' : function('s:hook_add_html5_vim'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'html5',
          \   'php',
          \ ],
          \ })
    " }}}

    " pangloss/vim-javascript {{{
    function! s:hook_source_vim_javascript() abort
      " JSDocのハイライトを有効化する
      let g:javascript_plugin_jsdoc = 1
    endfunction

    call dein#add('pangloss/vim-javascript', {
          \ 'hook_source' : function('s:hook_source_vim_javascript'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'javascript',
          \   'html',
          \ ],
          \ })
    " }}}

    " styled-components/vim-styled-components {{{
    call dein#add('styled-components/vim-styled-components', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'javascript',
          \   'javascriptreact',
          \   'typescript',
          \   'typescriptreact',
          \ ],
          \ })
    " }}}

    " MaxMEllon/vim-jsx-pretty {{{
    call dein#add('MaxMEllon/vim-jsx-pretty', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'javascript',
          \ ],
          \ })
    " }}}

    " leafgarland/typescript-vim {{{
    call dein#add('leafgarland/typescript-vim', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'typescript'
          \   'typescriptreact'
          \ ],
          \ })
    " }}}

    call dein#end()
  endif

  if dein#check_install()
    call dein#install()
  endif

  " sourceフックを呼ぶ
  call dein#call_hook('source')

  " post_sourceフックを呼ぶようにする
  autocmd vimrc VimEnter * call dein#call_hook('post_source')

  unlet s:plugin_dir
  unlet s:dein_repos

endif

if has('syntax')
  " シンタックスハイライト
  syntax enable
endif

filetype plugin indent on

" }}}

" vim:ft=vim:fdm=marker:fen:
