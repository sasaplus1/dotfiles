scriptencoding utf-8

" dein.vim {{{

if (v:version >= 704 || has('nvim')) && executable('git')

  let s:plugin_dir = $HOME . '/.vim/dein'
  let s:dein_repos = s:plugin_dir . '/repos/github.com/Shougo/dein.vim'

  if !isdirectory(s:dein_repos)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repos
  endif

  " NOTE:
  "   リセットしてしまうとkaoriyaのスクリプトが読み込まれない
  "   $VIM/vimrc を参照のこと
  "
  " リセットする
  " set runtimepath&

  " runtimepathに追加されていなかったら追加する
  if &runtimepath !~# s:dein_repos
    execute 'set' 'runtimepath+=' . s:dein_repos
  endif

  if dein#load_state(s:plugin_dir)
    call dein#begin(s:plugin_dir)

    " Shougo/dein.vim {{{
    function! s:hook_source_dein_vim() abort
      " ,nuでプラグインをアップデートする
      nnoremap ,nu :<C-u>call dein#update()<CR>
    endfunction

    call dein#add(s:dein_repos, {
          \ 'hook_source' : function('s:hook_source_dein_vim'),
          \ })
    " }}}

    " junegunn/fzf {{{
    function! s:hook_add_junegunn_fzf() abort
      " コマンド名にプレフィックスをつける
      let g:fzf_command_prefix = 'Fzf'
      " バッファを既に開いているのならそれを使う
      let g:fzf_buffers_jump = 1
      " レイアウトの指定
      let g:fzf_layout = {
            \ 'down' : '60%'
            \ }
      " ポップアップウィンドウを使う
      if has('patch-8.2.191') && has('popupwin')
        call extend(g:fzf_layout, {
              \   'window' : {
              \     'border' : 'top',
              \     'height' : 0.6,
              \     'width' : 1,
              \     'yoffset' : 1,
              \   },
              \ })
      endif
    endfunction

    function! s:hook_source_junegunn_fzf() abort
      " Vimのプロセスだけデフォルトオプションを変更する
      let $FZF_DEFAULT_OPTS = join([
            \   $FZF_DEFAULT_OPTS,
            \   '--layout=reverse-list',
            \   '--margin=0,0,0,0'
            \ ], ' ')

      function! s:get_file_preview_command() abort
        if executable('bat')
          return join([
                \   'eval "bat --color=always -pp -r :60 $(eval "printf -- "%b" {}") 2>/dev/null"',
                \   'eval "cd $(dirname {}) && find . -maxdepth 1 -print"',
                \ ], ' || ')
        endif

        return join([
              \ 'eval "head -n 60 $(eval "printf -- "%b" {}") 2>/dev/null"',
              \ 'eval "cd $(dirname {}) && find . -maxdepth 1 -print"',
              \ ], ' || ')
      endfunction

      function! s:get_preview_position() abort
        if $TERM =~# '^screen' && executable('tmux')
          let window_width = split(system('tmux display-message -p "#{window_width}"'))[0]
          let pane_width = split(system('tmux display-message -p "#{pane_width}"'))[0]

          return window_width != pane_width ? 'bottom' : 'right'
        endif

        return 'right'
      endfunction

      " できるだけリポジトリ全体から検索する
      function! s:fzf_rg(pattern) abort
        let pwd = expand('%:p:h')
        let git_dir = finddir('.git', pwd . ';')
        let dir = isdirectory(git_dir) ? simplify(git_dir . '/..') : expand('%:p:h')

        let options = '--color=always --column --hidden --line-number --no-heading --smart-case'
        let command = printf('rg %s -- ''%s'' "%s"', options, a:pattern, dir)

        call fzf#vim#grep(command, 1, fzf#vim#with_preview())
      endfunction

      command! -nargs=1 FzfRg call <SID>fzf_rg('<args>')

      " ,ubでバッファ一覧
      nnoremap <silent> ,ub :<C-u>FzfBuffers<CR>
      " ,ufでgit ls-filesの一覧
      nnoremap <silent> ,uf :<C-u>call fzf#vim#gitfiles('-co --exclude-standard', {
            \ 'options' : [
            \   '--prompt', 'Git:ls-files> ',
            \   '--preview-window', <SID>get_preview_position(),
            \   '--preview', <SID>get_file_preview_command(),
            \ ]
            \ })<CR>
      " ,ugでrgを使ったgrepをする
      nnoremap ,ug :<C-u>FzfRg<Space>
      " ,ulで行一覧
      nnoremap <silent> ,ul :<C-u>FzfBLines<CR>
      " ,umで最近開いたファイル一覧
      nnoremap <silent> ,um :<C-u>call fzf#vim#history({
            \ 'options' : [
            \   '--prompt', 'History> ',
            \   '--preview-window', <SID>get_preview_position(),
            \   '--preview', <SID>get_file_preview_command(),
            \ ]
            \ })<CR>

      function! s:fzf_some_files() abort
        let pwd = expand('%:p:h')
        let git_dir = finddir('.git', pwd . ';')

        if isdirectory(git_dir)
          let pickup = printf('git --git-dir="%s" ls-files -co --exclude-standard', git_dir)
        elseif executable('rg')
          let pickup = printf('rg --color never --max-depth 5 --files "%s"', pwd)
        elseif executable('fd')
          let pickup = printf('fd -a -d 5 -p -t f -c never "%s"', pwd)
        endif

        " get files
        let files = split(system(pickup))

        " get history
        let history = filter(copy(v:oldfiles), 'filereadable(fnamemodify(v:val, ":p"))')

        let layout = deepcopy(g:fzf_layout)
        let options = extend(layout, {
              \ 'source' : uniq(sort(files + history)),
              \ 'sink' : 'edit',
              \ 'down' : '60%',
              \ 'dir' : simplify(git_dir . '/..'),
              \ 'options' : [
              \   '--prompt', 'Mixed> ',
              \   '--preview-window', s:get_preview_position(),
              \   '--preview', s:get_file_preview_command(),
              \ ],
              \ })

        " some kind files, history
        call fzf#run(options)
      endfunction

      function! s:fzf_some_dirs() abort
        let pwd = expand('%:p:h')
        let git_dir = finddir('.git', pwd . ';')

        if isdirectory(git_dir)
          let pickup = printf('git --git-dir="%s" ls-tree -dr --name-only HEAD', git_dir)
        elseif executable('fd')
          let pickup = printf('fd -a -d 5 -p -t d -c never "%s"', pwd)
        endif

        " get dirs
        let dirs = split(system(pickup))

        " get history
        let history = filter(
              \ copy(map(copy(v:oldfiles), 'fnamemodify(v:val, ":p:h")')),
              \ 'isdirectory(v:val)')

        let repos = executable('ghq') ? split(system('ghq list -p')) : []

        let layout = deepcopy(g:fzf_layout)
        let options = extend(layout, {
              \ 'source' : uniq(sort(dirs + history + repos)),
              \ 'sink' : 'Explore!',
              \ 'down' : '60%',
              \ 'dir' : simplify(git_dir . '/..'),
              \ 'options' : [
              \   '--prompt', 'Mixed> ',
              \   '--preview-window', s:get_preview_position(),
              \   '--preview', 'eval "cd {} && find . -maxdepth 1 -print"',
              \ ],
              \ })

        " some kind files, history
        call fzf#run(options)
      endfunction

      " nnoremap <silent> <C--> :<C-u>FzfGfiles<CR>
      nnoremap <silent> <C-p> :<C-u>call <SID>fzf_some_files()<CR>
      " nnoremap <silent> <C-i> :<C-u>call <SID>fzf_some_dirs()<CR>
    endfunction

    call dein#add('junegunn/fzf', {
          \ 'build' : './install --bin',
          \ 'lazy' : 1,
          \ 'merged' : 0
          \ })
    call dein#add('junegunn/fzf.vim', {
          \ 'depends' : [
          \   'fzf',
          \ ],
          \ 'hook_add' : function('s:hook_add_junegunn_fzf'),
          \ 'hook_source' : function('s:hook_source_junegunn_fzf'),
          \ 'if' : 'v:version >= 704 && dein#tap("fzf") && 0',
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'Fzf',
          \   '<Plug>(fzf-',
          \ ],
          \ 'on_map' : [
          \   '<C-p>',
          \   ',ub',
          \   ',uf',
          \   ',ug',
          \   ',ul',
          \   ',um',
          \ ],
          \ })
    " }}}

    " mattn/ctrlp-matchfuzzy {{{
    call dein#add('mattn/ctrlp-matchfuzzy', {
          \ 'if' : 'exists("?matchfuzzy")',
          \ 'lazy' : 1,
          \ })
    " }}}

    " ctrlpvim/ctrlp.vim {{{
    function! s:hook_add_ctrlpvim() abort
      " <C-p>のコマンドを変更する
      let g:ctrlp_cmd = 'CtrlPMixed'

      " NOTE: https://kamiya555.github.io/2016/07/24/vim-ctrlp/
      " キャッシュディレクトリ
      let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
      " キャッシュを終了時に削除しない
      let g:ctrlp_clear_cache_on_exit = 0
      " キー入力があってから16ms後に更新する
      " 1000 / 60 = 16.666666666666667 : 60FPS
      " let g:ctrlp_lazy_update = 16
      " ルートパスと認識させるためのファイル
      let g:ctrlp_root_markers = [
            \ '.git',
            \ '.hg',
            \ '.svn',
            \ '.bzr',
            \ '_darcs',
            \ 'Gemfile',
            \ 'package.json',
            \ ]

      if dein#tap('ctrlp-matchfuzzy')
        " マッチャーを変更する
        let g:ctrlp_match_func = { 'match' : 'ctrlp_matchfuzzy#matcher' }
      endif

      " ドットで始まるファイルやディレクトリを表示する
      let g:ctrlp_show_hidden = 1
      " ウィンドウに関する設定
      let g:ctrlp_match_window = 'bottom,order:ttb,min:25,max:25,results:25'

      " スペースを無視する
      " https://github.com/ctrlpvim/ctrlp.vim/issues/196
      let g:ctrlp_abbrev = {
            \ 'gmode' : 'i',
            \ 'abbrevs' : [
            \   {
            \     'pattern' : ' ',
            \     'expanded' : '',
            \     'mode' : 'fprz',
            \   },
            \ ],
            \ }

      " 無視するディレクトリの正規表現の一部
      let ignore_dirs = 'bower_components|node_modules|vendor'
      " 無視するドットで始まるディレクトリの正規表現の一部
      let ignore_dot_dirs = 'git|hg|svn|bundle|sass-cache|node-gyp|cache'
      " 無視するファイルの正規表現の一部
      let ignore_files = 'exe|so|dll|bmp|gif|ico|jpe?g|png|webp|ai|psd'

      " 無視するファイルとディレクトリの設定
      let g:ctrlp_custom_ignore = {
            \ 'dir' : printf('\v[\/]%%(%%(%s)|\.%%(%s))$', ignore_dirs, ignore_dot_dirs),
            \ 'file' : printf('\v\.%%(%s)$', ignore_files),
            \ }

      " 外部コマンドを使うのでキャッシュしない
      let g:ctrlp_use_caching = 0

      " 外部コマンドを使って高速にファイルを列挙する
      let g:ctrlp_user_command_async = 1
      let g:ctrlp_user_command = {
            \ 'types' : {
            \   1 : ['.git', 'cd %s && git ls-files -co --exclude-standard'],
            \ },
            \ 'fallback' :
            \    executable('fd') ? 'fd --type f --color never --full-path %s' :
            \    executable('rg') ? 'rg --color never --smart-case --files %s' :
            \    executable('pt') ? 'pt --nocolor --nogroup --files-with-matches %s' :
            \   'find %s -type f -print',
            \ }

      " キーマッピングを変更する
      let g:ctrlp_prompt_mappings = {
            \ 'PrtSelectMove("j")' : ['<C-n>', '<Down>'],
            \ 'PrtSelectMove("k")' : ['<C-p>', '<Up>'],
            \ 'PrtHistory(-1)' : ['<C-j>'],
            \ 'PrtHistory(1)' : ['<C-k>'],
            \ 'YankLine()' : ['<C-y>'],
            \ 'CreateNewFile()' : [],
            \ }
    endfunction

    function! s:ctrlp_grep(pattern) abort
      let git_dir = finddir('.git', '.;')

      if &grepprg =~# '\v^(rg|pt)' && len(git_dir) != 0
        let ignore = ''

        if &grepprg =~# '\v^rg'
          " ripgrepで.gitを無視する
          let ignore = '--glob !.git'
        elseif &grepprg =~# '\v^pt'
          " ptで.gitを無視する
          let ignore = '--ignore .git'
        endif

        execute printf(
              \ 'silent! grep! %s %s -- %s | redraw! | CtrlPQuickfix',
              \ ignore,
              \ a:pattern,
              \ simplify(git_dir . '/..'),
              \ )
      else 
        execute printf('silent! grep! %s | redraw! | CtrlPQuickfix', a:pattern)
      endif
    endfunction

    function! s:hook_source_ctrlpvim() abort
      " CtrlPGrepを定義する
      command! -nargs=1 CtrlPGrep call <SID>ctrlp_grep(<f-args>)

      " ,ubでバッファ一覧
      nnoremap ,ub :<C-u>CtrlPBuffer<CR>
      " ,ugでgrepをする
      nnoremap ,ug :<C-u>CtrlPGrep<Space>
      " ,ulで行一覧
      nnoremap ,ul :<C-u>CtrlPLine<CR>
      " ,umで最近開いたファイル一覧
      nnoremap ,um :<C-u>CtrlPMRUFiles<CR>
    endfunction

    call dein#add('ctrlpvim/ctrlp.vim', {
          \ 'depends' : exists('?matchfuzzy') ? ['ctrlp-matchfuzzy'] : [],
          \ 'hook_add' : function('s:hook_add_ctrlpvim'),
          \ 'hook_source' : function('s:hook_source_ctrlpvim'),
          \ 'if' : 'v:version >= 700 && !dein#tap("fzf.vim")',
          \ 'lazy' : 1,
          \ 'on_cmd' : '<Plug>(CtrlP',
          \ 'on_map' : [
          \   '<C-p>',
          \   ',ub',
          \   ',ug',
          \   ',ul',
          \   ',um',
          \ ],
          \ })
    " }}}

    " neoclide/coc.nvim {{{
    function! s:hook_add_coc_nvim() abort
      if has('eval') && exists('&tagfunc')
        autocmd vimrc FileType javascript,javascriptreact,typescript,typescriptreact setlocal tagfunc=CocTagFunc
      else
        autocmd vimrc FileType javascript,javascriptreact,typescript,typescriptreact nmap <buffer><silent> <C-]> <Plug>(coc-definition)
      endif

      autocmd vimrc FileType javascript,javascriptreact,typescript,typescriptreact nnoremap <silent> K :call CocAction('doHover')<CR>
    endfunction

    function! s:hook_post_source_coc_nvim() abort
      if !exists('*CocTagFunc')
        " tagfuncでタグスタックを使うようにして<C-t>で戻ってこれるようにする
        " https://github.com/neoclide/coc.nvim/issues/1054#issuecomment-531839361
        function! CocTagFunc(pattern, flags, info) abort
          " ノーマルモードでなかったら無視
          if a:flags !=# 'c'
            return v:null
          endif

          let name = expand('<cword>')

          execute('call CocAction("jumpDefinition")')

          let filename = expand('%:p')
          let cursor_pos = getpos('.')
          let cmd = '/\%' . cursor_pos[1] . 'l\%' . cursor_pos[2] . 'c/'

          execute("normal \<C-o>")

          return [ { 'name': name, 'filename': filename, 'cmd': cmd } ]
        endfunction
      endif

      function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1] =~# '\s'
      endfunction

      inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
      inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

      inoremap <silent><expr> <C-k> coc#refresh()

      " Enterを押した時に候補を決定する
      if exists('?complete_info')
        inoremap <expr><CR> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
      else
        inoremap <expr><CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
      endif

      if has('patch8.1.1068')
        inoremap <expr><CR> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
      else
        imap <expr><CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
      endif

      nmap <silent> [g <Plug>(coc-diagnostic-prev)
      nmap <silent> ]g <Plug>(coc-diagnostic-next)

      nmap <silent> gd <Plug>(coc-definition)
      nmap <silent> gy <Plug>(coc-type-definition)
      nmap <silent> gi <Plug>(coc-implementation)
      nmap <silent> gr <Plug>(coc-references)
      nmap <silent> ge <Plug>(coc-rename)

      let extension_dir = simplify(coc#util#extension_root() . '/node_modules')

      let modules = [
            \ 'coc-css',
            \ 'coc-cssmodules',
            \ 'coc-dictionary',
            \ 'coc-html',
            \ 'coc-json',
            \ 'coc-tsserver',
            \ 'coc-yaml',
            \ ]

      for module in modules
        if !isdirectory(extension_dir . '/' . module)
          execute(printf('CocInstall %s', module))
        endif
      endfor
    endfunction

    function! s:hook_source_coc_nvim() abort
       let node_version = trim(system("nodebrew ls | grep '^v' | sort -r --version-sort | head -n 1"))
       let g:coc_node_path = printf('~/.nodebrew/node/%s/bin/node', node_version)
    endfunction

    call dein#add('neoclide/coc.nvim', {
          \ 'hook_add' : function('s:hook_add_coc_nvim'),
          \ 'hook_post_source' : function('s:hook_post_source_coc_nvim'),
          \ 'hook_source' : function('s:hook_source_coc_nvim'),
          \ 'if' : 'executable("node") && (v:version >= 800 || has("nvim-0.3.1"))',
          \ 'lazy' : 1,
          \ 'merged' : 0,
          \ 'on_cmd' : [
          \   'CocStart',
          \   'CocRestart',
          \   'CocDisable',
          \   'CocEnable',
          \   'CocConfig',
          \   'CocInstall',
          \   'CocUninstall',
          \   'CocUpdate',
          \   'CocRebuild',
          \   'CocCommand',
          \   'CocAction',
          \   'CocFix',
          \   'CocInfo',
          \   'CocDiagnostics',
          \   'CocSearch',
          \   '<Plug>(coc-',
          \ ],
          \ 'on_ft' : [
          \   'css',
          \   'html',
          \   'javascript',
          \   'javascriptreact',
          \   'json',
          \   'typescript',
          \   'typescriptreact',
          \   'yaml',
          \ ],
          \ 'on_map' : [
          \   '<TAB>',
          \   '<S-TAB>',
          \   '<C-k>',
          \   '<C-]>',
          \   '<CR>',
          \   'K',
          \   '[g',
          \   ']g',
          \   'gd',
          \   'gy',
          \   'gi',
          \   'gr',
          \   'ge',
          \ ],
          \ 'rev' : 'release',
          \ })
    " }}}

    " editorconfig/editorconfig-vim {{{
    call dein#add('editorconfig/editorconfig-vim')
    " }}}

    " junegunn/vim-easy-align {{{
    function! s:hook_post_source_vim_easy_align() abort
      " Start interactive EasyAlign in visual mode (e.g. vipga)
      xmap ga <Plug>(EasyAlign)
      " Start interactive EasyAlign for a motion/text object (e.g. gaip)
      nmap ga <Plug>(EasyAlign)
    endfunction

    call dein#add('junegunn/vim-easy-align', {
          \ 'hook_post_source' : function('s:hook_post_source_vim_easy_align'),
          \ })
    " }}}

    " itchyny/lightline.vim {{{
    call dein#add('itchyny/lightline.vim')
    " }}}

    " itchyny/vim-parenmatch {{{
    function! s:hook_source_vim_parenmatch() abort
      let g:parenmatch_highlight = 0

      " parenmatchの強調表示にmatchparenの色を使う
      highlight default link ParenMatch MatchParen
    endfunction

    call dein#add('itchyny/vim-parenmatch', {
          \ 'hook_source' : function('s:hook_source_vim_parenmatch')
          \ })
    " }}}

    " thinca/vim-quickrun {{{
    call dein#add('thinca/vim-quickrun', {
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'QuickRun',
          \   '<Plug>(quick',
          \ ],
          \ 'on_map' : '<Leader>r',
          \ })
    " }}}

    " thinca/vim-qfreplace {{{
    call dein#add('thinca/vim-qfreplace', {
          \ 'lazy' : 1,
          \ 'on_cmd' : 'Qfreplace',
          \ })
    " }}}

    " othree/eregex.vim {{{
    function! s:hook_source_eregex_vim() abort
      " キーマップの変更を行なわない
      let g:eregex_default_enable = 0
    endfunction

    call dein#add('othree/eregex.vim', {
          \ 'hook_source' : function('s:hook_source_eregex_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'E2v',
          \   'M',
          \   'S',
          \   'G',
          \   'G!',
          \   'V',
          \ ],
          \ 'on_func' : [
          \   'E2v',
          \ ],
          \ 'on_event' : 'CmdlineEnter',
          \ })
    " }}}

    " kana/vim-gf-user {{{
    function! GfImport() abort
      let path = expand('<cfile>')

      if path !~# '^\.\.\?'
        return 0
      endif

      let completions = [
            \   '.tsx',
            \   '.ts',
            \   '.mjs',
            \   '.cjs',
            \   '.jsx',
            \   '.js',
            \   '.json',
            \ ]

      let dir = simplify(expand('%:p:h') . '/' . path)

      for completion in completions
        let test = resolve(dir . completion)

        if filereadable(test)
          return {
                \ 'path' : test,
                \ 'line' : 0,
                \ 'col' : 0,
                \ }
        endif
      endfor

      return 0
    endfunction

    function! s:hook_post_source_vim_gf_user() abort
      call gf#user#extend('GfImport', 1000)
    endfunction

    call dein#add('kana/vim-gf-user', {
          \ 'lazy' : 1,
          \ 'hook_post_source' : function('s:hook_post_source_vim_gf_user'),
          \ 'if' : 0,
          \ 'on_ft' : [
          \   'javascript',
          \   'javascriptreact',
          \   'javascript.jsx',
          \   'typescript',
          \   'typescriptreact',
          \ ],
          \ })
    " }}}

    " kana/vim-operator-user {{{
    call dein#add('kana/vim-operator-user', {
          \ 'lazy' : 1,
          \ })
    " }}}

    " rhysd/vim-operator-surround {{{
    function! s:hook_source_vim_operator_surround() abort
      " map from https://github.com/rhysd/vim-operator-surround
      map <silent>sa <Plug>(operator-surround-append)
      map <silent>sd <Plug>(operator-surround-delete)
      map <silent>sr <Plug>(operator-surround-replace)
      nmap <silent>sbd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
      nmap <silent>sbr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
    endfunction

    " kana/vim-operator-userに依存している
    call dein#add('rhysd/vim-operator-surround', {
          \ 'depends' : [
          \   'vim-operator-user',
          \ ],
          \ 'hook_source' : function('s:hook_source_vim_operator_surround'),
          \ 'lazy' : 1,
          \ 'on_cmd' : '<Plug>(operator-surround-',
          \ 'on_map' : [
          \   'sa',
          \   'sd',
          \   'sr',
          \   'sbd',
          \   'sbr',
          \ ],
          \ })
    " }}}

    " tyru/operator-camelize.vim {{{
    function! s:hook_source_operator_camelize() abort
      vmap <silent>c <Plug>(operator-camelize)
      vmap <silent>_ <Plug>(operator-decamelize)
    endfunction

    " kana/vim-operator-userに依存している
    call dein#add('tyru/operator-camelize.vim', {
          \ 'depends' : [
          \   'vim-operator-user',
          \ ],
          \ 'hook_source' : function('s:hook_source_operator_camelize'),
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   '<Plug>(operator-camelize-',
          \   '<Plug>(operator-decamelize-',
          \ ],
          \ 'on_map' : [
          \   'c',
          \   '_',
          \ ],
          \ })
    " }}}

    " mattn/gist-vim {{{
    function! s:hook_add_gist_vim() abort
      nnoremap ,gd :<C-u>Gist -d<CR>
      nnoremap ,ge :<C-u>Gist -s<Space>
      nnoremap ,gf :<C-u>Gist -f<CR>
      nnoremap ,gl :<C-u>Gist -l<CR>
      nnoremap ,gmp :<C-u>Gist -m -p -s<Space>
      nnoremap ,gmP :<C-u>Gist -m -P -s<Space>
      nnoremap ,gp :<C-u>Gist -p -s<Space>
      nnoremap ,gP :<C-u>Gist -P -s<Space>
    endfunction

    function! s:hook_source_gist_vim() abort
      " 複数ファイルを取得する
      let g:gist_get_multiplefile = 1
    endfunction

    call dein#add('mattn/webapi-vim', {
          \ 'lazy' : 1,
          \ })
    call dein#add('mattn/gist-vim', {
          \ 'depends' : 'webapi-vim',
          \ 'hook_add' : function('s:hook_add_gist_vim'),
          \ 'hook_source' : function('s:hook_source_gist_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : 'Gist',
          \ })
    " }}}

    " tyru/open-browser.vim {{{
    function! s:hook_source_open_browser_vim() abort
      let g:netrw_nogx = 1
      nmap gx <Plug>(openbrowser-smart-search)
      vmap gx <Plug>(openbrowser-smart-search)
    endfunction

    call dein#add('tyru/open-browser.vim', {
          \ 'hook_source' : function('s:hook_source_open_browser_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'OpenBrowser',
          \   'OpenBrowserSearch',
          \   'OpenBrowserSmartSearch',
          \   '<Plug>(openbrowser-',
          \ ],
          \ 'on_map' : 'gx',
          \ })
    " }}}

    " sasaplus1/ameba-color-palette.dict {{{
    call dein#add('sasaplus1/ameba-color-palette.dict')
    " }}}

    " digitaltoad/vim-pug {{{
    call dein#add('digitaltoad/vim-pug', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'pug',
          \ ],
          \ })
    " }}}

    " hail2u/vim-css3-syntax {{{
    call dein#add('hail2u/vim-css3-syntax', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'css',
          \   'html',
          \   'scss',
          \ ],
          \ })
    " }}}

    " cespare/vim-toml {{{
    call dein#add('cespare/vim-toml', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'toml',
          \ ],
          \ })
    " }}}

    " othree/html5.vim {{{
    function! s:hook_add_html5_vim() abort
      " *.ejsと*.vueのファイルタイプをHTMLとする
      autocmd vimrc BufNewFile,BufRead *.{ejs,vue} setlocal filetype=html
    endfunction

    call dein#add('othree/html5.vim', {
          \ 'hook_add' : function('s:hook_add_html5_vim'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'html',
          \   'php',
          \ ],
          \ })
    " }}}

    " pangloss/vim-javascript {{{
    function! s:hook_source_vim_javascript() abort
      " JSDocのハイライトを有効化する
      let g:javascript_plugin_jsdoc = 1
    endfunction

    call dein#add('pangloss/vim-javascript', {
          \ 'hook_source' : function('s:hook_source_vim_javascript'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'javascript',
          \   'javascriptreact',
          \ ],
          \ })
    " }}}

    " styled-components/vim-styled-components {{{
    call dein#add('styled-components/vim-styled-components', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'javascript',
          \   'javascriptreact',
          \   'typescript',
          \   'typescriptreact',
          \ ],
          \ })
    " }}}

    " MaxMEllon/vim-jsx-pretty {{{
    call dein#add('MaxMEllon/vim-jsx-pretty', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'javascript',
          \   'javascriptreact',
          \ ],
          \ })
    " }}}

    " leafgarland/typescript-vim {{{
    call dein#add('leafgarland/typescript-vim', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'typescript',
          \   'typescriptreact',
          \ ],
          \ })
    " }}}

    " vim-jp/vimdoc-ja {{{
    call dein#add('vim-jp/vimdoc-ja')
    " }}}

    call dein#end()
  endif

  if dein#check_install()
    call dein#install()
  endif

  " sourceフックを呼ぶ
  call dein#call_hook('source')

  " post_sourceフックを呼ぶようにする
  autocmd vimrc VimEnter * call dein#call_hook('post_source')

  unlet s:plugin_dir
  unlet s:dein_repos

endif

if has('syntax')
  " シンタックスハイライト
  syntax enable
endif

filetype plugin indent on

" }}}

" vim:ft=vim:fdm=marker:fen:
