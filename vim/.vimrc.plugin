" dein.vim {{{

if (v:version >= 704 || has('nvim')) && executable('git')

  let s:plugin_dir = $HOME . '/.vim/dein'
  let s:dein_repos = s:plugin_dir . '/repos/github.com/Shougo/dein.vim'

  if !isdirectory(s:dein_repos)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repos
  endif

  " NOTE:
  "   リセットしてしまうとkaoriyaのスクリプトが読み込まれない
  "   $VIM/vimrc を参照のこと
  "
  " リセットする
  " set runtimepath&

  " runtimepathに追加されていなかったら追加する
  if &runtimepath !~# s:dein_repos
    execute 'set' 'runtimepath+=' . s:dein_repos
  endif

  if dein#load_state(s:plugin_dir)
    call dein#begin(s:plugin_dir)

    " Shougo/dein.vim {{{
    function! s:hook_source_dein_vim() abort
      " ,nuでプラグインをアップデートする
      nnoremap ,nu :<C-u>call dein#update()<CR>
    endfunction

    call dein#add(s:dein_repos, {
          \ 'hook_source' : function('s:hook_source_dein_vim'),
          \ })
    " }}}

    " francoiscabrol/ranger.vim {{{
    function! s:hook_post_source_ranger() abort
      " ,vfで表示
      nnoremap ,vf :<C-u>Ranger<CR>
    endfunction

    function! s:hook_source_ranger() abort
      " netrwでなくrangerで処理をする
      let g:ranger_replace_netrw = 1
      " デフォルトのキーマップを使用しない
      let g:ranger_map_keys = 0
    endfunction

    call dein#add('rbgrouleff/bclose.vim', {
          \ 'lazy' : 1,
          \ 'on_if' : 'has("nvim")',
          \ })

    let s:ranger_options = {
          \ 'hook_post_source' : function('s:hook_post_source_ranger'),
          \ 'hook_source' : function('s:hook_source_ranger'),
          \ 'lazy' : 1,
          \ 'on_if' : 'executable("ranger")',
          \ 'on_map' : [
          \   ',vf',
          \ ],
          \ }

    " NOTE: Neovimの時だけdependsを追加する
    if has('nvim')
      let s:ranger_options.depends = [
            \   'bclose.vim',
            \ ]
    endif

    call dein#add('francoiscabrol/ranger.vim', s:ranger_options)
    " }}}

    " prabirshrestha/vim-lsp {{{
    function! s:hook_post_source_vim_lsp() abort
      " https://github.com/prabirshrestha/vim-lsp/wiki/Servers-TypeScript
      if executable('typescript-language-server')
        autocmd User lsp_setup call lsp#register_server({
              \ 'name' : 'typescript-language-server',
              \ 'cmd' : {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
              \ 'root_uri' : {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
              \ 'whitelist' : ['javascript', 'javascript.jsx'],
              \ })
        autocmd User lsp_setup call lsp#register_server({
              \ 'name' : 'typescript-language-server',
              \ 'cmd' : {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
              \ 'root_uri' : {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
              \ 'whitelist' : ['typescript', 'typescript.tsx'],
              \ })
        " 編集時ドットを入力したら補完を表示する
        autocmd vimrc FileType javascript,typescript inoremap <expr><buffer> . '.\<C-n>'
      endif
      " https://mattn.kaoriya.net/software/lang/go/20181217000056.htm
      if executable('golsp')
        autocmd User lsp_setup call lsp#register_server({
              \ 'name' : 'go-lang',
              \ 'cmd' : {server_info->['golsp', '-mode', 'stdio']},
              \ 'whitelist' : ['go'],
              \ })
        autocmd FileType go setlocal omnifunc=lsp#complete
      endif
    endfunction

    function! s:hook_source_vim_lsp() abort
      " aleを使うのでLSPによる警告を無効にする
      let g:lsp_diagnostics_enabled = 0
      " 非同期補完
      let g:lsp_async_completion = 1
    endfunction

    call dein#add('prabirshrestha/async.vim', {
          \ 'on_if' : 'v:version >= 800 || has("nvim")',
          \ })
    call dein#add('prabirshrestha/vim-lsp', {
          \ 'depends' : [
          \   'async.vim'
          \ ],
          \ 'hook_post_source' : function('s:hook_post_source_vim_lsp'),
          \ 'hook_source' : function('s:hook_source_vim_lsp'),
          \ 'on_if' : 'v:version >= 800 || has("nvim")',
          \ })

    function! s:hook_sourc_asyncomplete_vim() abort
      " 重複を除く
      let g:asyncomplete_remove_duplicates = 1
      " fuzzy smart completion
      let g:asyncomplete_smart_completion = 1
      let g:asyncomplete_auto_popup = 1
    endfunction

    call dein#add('prabirshrestha/asyncomplete.vim', {
          \ 'hook_source' : function('s:hook_sourc_asyncomplete_vim'),
          \ 'on_if' : 'v:version >= 800 || has("nvim")',
          \ })
    call dein#add('prabirshrestha/asyncomplete-lsp.vim', {
          \ 'on_if' : 'v:version >= 800 || has("nvim")',
          \ })
    " }}}

    " ctrlpvim/ctrlp.vim {{{
    function! s:hook_add_ctrlpvim_ctrlpvim() abort
      " <C-p>のコマンドを変更する
      let g:ctrlp_cmd = 'CtrlPMixed'

      " NOTE: https://kamiya555.github.io/2016/07/24/vim-ctrlp/
      " キャッシュディレクトリ
      let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
      " キャッシュを終了時に削除しない
      let g:ctrlp_clear_cache_on_exit = 0
      " 遅延再描画
      let g:ctrlp_lazy_update = 1
      " ルートパスと認識させるためのファイル
      let g:ctrlp_root_markers = ['Gemfile', 'package.json']

      " ドットで始まるファイルやディレクトリを表示する
      let g:ctrlp_show_hidden = 1
      " ウィンドウに関する設定
      let g:ctrlp_match_window = 'bottom,order:ttb,min:20,max:20,results:20'

      " スペースを無視する
      " https://github.com/ctrlpvim/ctrlp.vim/issues/196
      let g:ctrlp_abbrev = {
            \ 'gmode' : 'i',
            \ 'abbrevs' : [
            \   {
            \     'pattern' : ' ',
            \     'expanded' : '',
            \     'mode' : 'fprz',
            \   },
            \ ],
            \ }

      " 無視するディレクトリの正規表現の一部
      let l:ignore_dirs = 'bower_components|node_modules|vendor'
      " 無視するドットで始まるディレクトリの正規表現の一部
      let l:ignore_dot_dirs = 'git|hg|svn|bundle|sass-cache|node-gyp|cache'
      " 無視するファイルの正規表現の一部
      let l:ignore_files = 'exe|so|dll|bmp|gif|ico|jpe?g|png|webp|ai|psd'

      " 無視するファイルとディレクトリの設定
      let g:ctrlp_custom_ignore = {
            \ 'dir' : printf('\v[\/]%%(%%(%s)|\.%%(%s))$', l:ignore_dirs, l:ignore_dot_dirs),
            \ 'file' : printf('\v\.%%(%s)$', l:ignore_files),
            \ }

      " 外部コマンドを使うのでキャッシュしない
      let g:ctrlp_use_caching = 0

      " 外部コマンドを使って高速にファイルを列挙する
      let g:ctrlp_user_command = {
            \ 'types' : {
            \   1 : ['.git', 'cd %s && git ls-files -co --exclude-standard']
            \ },
            \ 'fallback' : executable('pt') ?
            \   'pt --nocolor --nogroup --files-with-matches %s' :
            \   'find %s -type f'
            \ }

      " キーマッピングを変更する
      let g:ctrlp_prompt_mappings = {
            \ 'PrtSelectMove("j")' : ['<C-n>', '<Down>'],
            \ 'PrtSelectMove("k")' : ['<C-p>', '<Up>'],
            \ 'PrtHistory(-1)' : ['<C-j>'],
            \ 'PrtHistory(1)' : ['<C-k>'],
            \ 'YankLine()' : ['<C-y>'],
            \ 'CreateNewFile()' : [],
            \ }

      " ,ugでptを使ったgrepをする
      nnoremap <silent> ,ug :<C-u>execute printf("silent! grep! '%s' \| redraw! \| CtrlPQuickfix", input('pattern: ', ''))<CR>
      " ,umで最近開いたファイル一覧
      nnoremap ,um :<C-u>CtrlPMRUFiles<CR>
      " ,ulで行一覧
      nnoremap ,ul :<C-u>CtrlPLine<CR>
      " ,ubでバッファ一覧
      nnoremap ,ub :<C-u>CtrlPBuffer<CR>
    endfunction

    call dein#add('ctrlpvim/ctrlp.vim', {
          \ 'hook_add' : function('s:hook_add_ctrlpvim_ctrlpvim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : '<Plug>(CtrlP',
          \ 'on_if' : 'v:version >= 700',
          \ 'on_map' : '<C-p>',
          \ })
    " }}}

    " w0rp/ale {{{
    function! s:hook_source_ale() abort
      " linterの設定
      let g:ale_linters = {
            \ 'css' : ['stylelint'],
            \ 'javascript' : ['eslint'],
            \ 'javascript.jsx' : ['eslint'],
            \ 'json' : ['jq'],
            \ 'scss' : ['stylelint'],
            \ 'typescript' : ['tslint'],
            \ 'vue' : ['eslint'],
            \ }
      " fixerの設定
      let g:ale_fixers = {
            \ 'css' : ['stylelint'],
            \ 'javascript' : ['eslint'],
            \ 'javascript.jsx' : ['eslint'],
            \ 'json' : ['prettier'],
            \ 'scss' : ['stylelint'],
            \ 'typescript' : ['tslint'],
            \ }
      " 保存時fixする
      autocmd vimrc FileType css let b:ale_fix_on_save = 1
      autocmd vimrc FileType javascript let b:ale_fix_on_save = 1
      autocmd vimrc FileType json let b:ale_fix_on_save = 1
      autocmd vimrc FileType scss let b:ale_fix_on_save = 1
      autocmd vimrc FileType typescript let b:ale_fix_on_save = 1
      " ファイルのカレントディレクトリから実行する
      " monorepo毎に.eslintignoreがある場合などに有効
      autocmd vimrc BufNewFile,BufRead * let b:ale_command_wrapper = printf("cd '%s' && %s", expand("%:p:h"), '%*')
    endfunction

    call dein#add('w0rp/ale', {
          \ 'hook_source' : function('s:hook_source_ale'),
          \ 'on_if' : '(v:version >= 800 && has("timers") && has("job") && has("channel")) || has("nvim")',
          \ })
    " }}}

    " Quramy/tsuquyomi {{{
    function! s:hook_source_tsuquyomi() abort
      " quickfixを表示しない
      let g:tsuquyomi_disable_quickfix = 1
      " JavaScriptを開いたときに有効にする
      let g:tsuquyomi_javascript_support = 1
      " シングルクォートを使ってimportを生成する
      let g:tsuquyomi_single_quote_import = 1
    endfunction

    call dein#add('Quramy/tsuquyomi', {
          \ 'hook_source' : function('s:hook_source_tsuquyomi'),
          \ 'lazy' : 1,
          \ 'on_if' : 'v:version >= 800 || (v:version >= 704 && dein#tap("vimproc.vim"))',
          \ 'on_ft' : [
          \   'javascript',
          \   'typescript',
          \ ],
          \ })
    " }}}

    " editorconfig/editorconfig-vim {{{
    call dein#add('editorconfig/editorconfig-vim', {
          \ 'on_if' : 'has("python") || has("python3")',
          \ })
    " }}}

    " itchyny/lightline.vim {{{
    call dein#add('itchyny/lightline.vim')
    " }}}

    " thinca/vim-quickrun {{{
    call dein#add('thinca/vim-quickrun', {
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'QuickRun',
          \   '<Plug>(quick',
          \ ],
          \ 'on_map' : '<Leader>r',
          \ })
    " }}}

    " thinca/vim-qfreplace {{{
    call dein#add('thinca/vim-qfreplace', {
          \ 'lazy' : 1,
          \ 'on_cmd' : 'Qfreplace',
          \ })
    " }}}

    " othree/eregex.vim {{{
    function! s:hook_source_eregex_vim() abort
      " キーマップの変更を行なわない
      let g:eregex_default_enable = 0
    endfunction

    call dein#add('othree/eregex.vim', {
          \ 'hook_source' : function('s:hook_source_eregex_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'E2v',
          \   'M',
          \   'S',
          \   'G',
          \   'G!',
          \   'V',
          \ ],
          \ })
    " }}}

    " kana/vim-operator-user {{{
    call dein#add('kana/vim-operator-user', {
          \ 'lazy' : 1,
          \ })
    " }}}

    " rhysd/vim-operator-surround {{{
    function! s:hook_source_vim_operator_surround() abort
      " map from https://github.com/rhysd/vim-operator-surround
      map <silent>sa <Plug>(operator-surround-append)
      map <silent>sd <Plug>(operator-surround-delete)
      map <silent>sr <Plug>(operator-surround-replace)
      nmap <silent>sbd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
      nmap <silent>sbr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
    endfunction

    " kana/vim-operator-userに依存している
    call dein#add('rhysd/vim-operator-surround', {
          \ 'depends' : [
          \   'vim-operator-user',
          \ ],
          \ 'hook_source' : function('s:hook_source_vim_operator_surround'),
          \ 'lazy' : 1,
          \ 'on_cmd' : '<Plug>(operator-surround-',
          \ 'on_map' : [
          \   'sa',
          \   'sd',
          \   'sr',
          \   'sbd',
          \   'sbr',
          \ ],
          \ })
    " }}}

    " tyru/operator-camelize.vim {{{
    function! s:hook_source_operator_camelize() abort
      vmap <silent>c <Plug>(operator-camelize)
      vmap <silent>_ <Plug>(operator-decamelize)
    endfunction

    " kana/vim-operator-userに依存している
    call dein#add('tyru/operator-camelize.vim', {
          \ 'depends' : [
          \   'vim-operator-user',
          \ ],
          \ 'hook_source' : function('s:hook_source_operator_camelize'),
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   '<Plug>(operator-camelize-',
          \   '<Plug>(operator-decamelize-',
          \ ],
          \ 'on_map' : [
          \   'c',
          \   '_',
          \ ],
          \ })
    " }}}

    " mattn/gist-vim {{{
    function! s:hook_add_gist_vim() abort
      nnoremap ,gd :<C-u>Gist -d<CR>
      nnoremap ,ge :<C-u>Gist -s<Space>
      nnoremap ,gf :<C-u>Gist -f<CR>
      nnoremap ,gl :<C-u>Gist -l<CR>
      nnoremap ,gmp :<C-u>Gist -m -p -s<Space>
      nnoremap ,gmP :<C-u>Gist -m -P -s<Space>
      nnoremap ,gp :<C-u>Gist -p -s<Space>
      nnoremap ,gP :<C-u>Gist -P -s<Space>
    endfunction

    function! s:hook_source_gist_vim() abort
      " 複数ファイルを取得する
      let g:gist_get_multiplefile = 1
    endfunction

    call dein#add('mattn/webapi-vim', {
          \ 'lazy' : 1,
          \ })
    call dein#add('mattn/gist-vim', {
          \ 'depends' : 'webapi-vim',
          \ 'hook_add' : function('s:hook_add_gist_vim'),
          \ 'hook_source' : function('s:hook_source_gist_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : 'Gist',
          \ })
    " }}}

    " tyru/open-browser.vim {{{
    function! s:hook_source_open_browser_vim() abort
      let g:netrw_nogx = 1
      nmap gx <Plug>(openbrowser-smart-search)
      vmap gx <Plug>(openbrowser-smart-search)
    endfunction

    call dein#add('tyru/open-browser.vim', {
          \ 'hook_source' : function('s:hook_source_open_browser_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'OpenBrowser',
          \   'OpenBrowserSearch',
          \   'OpenBrowserSmartSearch',
          \   '<Plug>(openbrowser-',
          \ ],
          \ 'on_map' : 'gx',
          \ })
    " }}}

    " vim-jp/vim-go-extra {{{
    function! s:hook_post_update_vim_go_extra() abort
      if !executable('golsp')
        execute '!go get -u golang.org/x/tools/cmd/golsp'
      endif
      if !executable('golint')
        execute '!go get -u golang.org/x/lint/golint'
      endif
    endfunction

    call dein#add('vim-jp/vim-go-extra', {
          \ 'hook_post_update' : function('s:hook_post_update_vim_go_extra'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'go',
          \ ],
          \ })
    " }}}

    " language plugins {{{

    " digitaltoad/vim-pug {{{
    call dein#add('digitaltoad/vim-pug', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'pug',
          \ ],
          \ })
    " }}}

    " hail2u/vim-css3-syntax {{{
    call dein#add('hail2u/vim-css3-syntax', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'css',
          \   'html',
          \   'scss',
          \ ],
          \ })
    " }}}

    " othree/html5.vim {{{
    function! s:hook_add_html5_vim() abort
      " *.ejsと*.vueをのファイルタイプをHTMLとする
      autocmd vimrc BufNewFile,BufRead *.{ejs,vue} setlocal filetype=html
    endfunction

    call dein#add('othree/html5.vim', {
          \ 'hook_add' : function('s:hook_add_html5_vim'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'html5',
          \   'php',
          \ ],
          \ })
    " }}}

    " pangloss/vim-javascript {{{
    function! s:hook_source_vim_javascript() abort
      " JSDocのハイライトを有効化する
      let g:javascript_plugin_jsdoc = 1
    endfunction

    call dein#add('pangloss/vim-javascript', {
          \ 'hook_source' : function('s:hook_source_vim_javascript'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'javascript',
          \   'html',
          \ ],
          \ })
    " }}}

    " styled-components/vim-styled-components {{{
    call dein#add('styled-components/vim-styled-components', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'javascript',
          \   'typescript',
          \ ],
          \ })
    " }}}

    " mxw/vim-jsx {{{
    function! s:hook_source_vim_jsx() abort
      " 拡張子が.jsxでなくても強調表示を有効化する
      let g:jsx_ext_required = 0
    endfunction

    call dein#add('mxw/vim-jsx', {
          \ 'hook_source' : function('s:hook_source_vim_jsx'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'javascript',
          \ ],
          \ })
    " }}}

    " }}}

    call dein#end()
  endif

  if dein#check_install()
    call dein#install()
  endif

  " sourceフックを呼ぶ
  call dein#call_hook('source')

  " post_sourceフックを呼ぶようにする
  autocmd vimrc VimEnter * call dein#call_hook('post_source')

  unlet s:plugin_dir
  unlet s:dein_repos

endif

if has('syntax')
  " シンタックスハイライト
  syntax enable
endif

filetype plugin indent on

" }}}

" vim:ft=vim:fdm=marker:fen:
