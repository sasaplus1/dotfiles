scriptencoding utf-8

" dein.vim {{{

if (v:version >= 704 || has('nvim')) && executable('git')

  let s:plugin_dir = $HOME . '/.vim/dein'
  let s:dein_repos = s:plugin_dir . '/repos/github.com/Shougo/dein.vim'

  if !isdirectory(s:dein_repos)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repos
  endif

  " NOTE:
  "   リセットしてしまうとkaoriyaのスクリプトが読み込まれない
  "   $VIM/vimrc を参照のこと
  "
  " リセットする
  " set runtimepath&

  " runtimepathに追加されていなかったら追加する
  if &runtimepath !~# s:dein_repos
    execute 'set' 'runtimepath+=' . s:dein_repos
  endif

  if dein#load_state(s:plugin_dir)
    call dein#begin(s:plugin_dir)

    " Shougo/dein.vim {{{
    function! s:hook_source_dein_vim() abort
      " ,nuでプラグインをアップデートする
      nnoremap ,nu :<C-u>call dein#update()<CR>
    endfunction

    call dein#add(s:dein_repos, {
          \ 'hook_source' : function('s:hook_source_dein_vim'),
          \ })
    " }}}

    " junegunn/fzf {{{
    function! s:hook_add_junegunn_fzf() abort
      " コマンド名にプレフィックスをつける
      let g:fzf_command_prefix = 'Fzf'
      " バッファを既に開いているのならそれを使う
      let g:fzf_buffers_jump = 1
      " レイアウトの指定
      let g:fzf_layout = {
            \ 'down' : '60%'
            \ }
      " ポップアップウィンドウを使う
      if has('patch-8.2.191') && has('popupwin')
        call extend(g:fzf_layout, {
              \   'window' : {
              \     'border' : 'top',
              \     'height' : 0.6,
              \     'width' : 1,
              \     'yoffset' : 1,
              \   },
              \ })
      endif
    endfunction

    function! s:hook_source_junegunn_fzf() abort
      " Vimのプロセスだけデフォルトオプションを変更する
      let $FZF_DEFAULT_OPTS = join([
            \   $FZF_DEFAULT_OPTS,
            \   '--layout=reverse-list',
            \   '--margin=0,0,0,0'
            \ ], ' ')

      function! s:get_file_preview_command() abort
        if executable('bat')
          return join([
                \   'eval "bat --color=always -pp -r :60 $(eval "printf -- "%b" {}") 2>/dev/null"',
                \   'eval "cd $(dirname {}) && find . -maxdepth 1 -print"',
                \ ], ' || ')
        endif

        return join([
              \ 'eval "head -n 60 $(eval "printf -- "%b" {}") 2>/dev/null"',
              \ 'eval "cd $(dirname {}) && find . -maxdepth 1 -print"',
              \ ], ' || ')
      endfunction

      function! s:get_preview_position() abort
        if $TERM =~# '^screen' && executable('tmux')
          let window_width = split(system('tmux display-message -p "#{window_width}"'))[0]
          let pane_width = split(system('tmux display-message -p "#{pane_width}"'))[0]

          return window_width != pane_width ? 'bottom' : 'right'
        endif

        return 'right'
      endfunction

      " できるだけリポジトリ全体から検索する
      function! s:fzf_rg(pattern) abort
        let pwd = expand('%:p:h')
        let git_dir = finddir('.git', pwd . ';')
        let dir = isdirectory(git_dir) ? simplify(git_dir . '/..') : expand('%:p:h')

        let options = '--color=always --column --hidden --line-number --no-heading --smart-case'
        let command = printf('rg %s -- ''%s'' "%s"', options, a:pattern, dir)

        call fzf#vim#grep(command, 1, fzf#vim#with_preview())
      endfunction

      command! -nargs=1 FzfRg call <SID>fzf_rg('<args>')

      " ,ubでバッファ一覧
      nnoremap <silent> ,ub :<C-u>FzfBuffers<CR>
      " ,ufでgit ls-filesの一覧
      nnoremap <silent> ,uf :<C-u>call fzf#vim#gitfiles('-co --exclude-standard', {
            \ 'options' : [
            \   '--prompt', 'Git:ls-files> ',
            \   '--preview-window', <SID>get_preview_position(),
            \   '--preview', <SID>get_file_preview_command(),
            \ ]
            \ })<CR>
      " ,ugでrgを使ったgrepをする
      nnoremap ,ug :<C-u>FzfRg<Space>
      " ,ulで行一覧
      nnoremap <silent> ,ul :<C-u>FzfBLines<CR>
      " ,umで最近開いたファイル一覧
      nnoremap <silent> ,um :<C-u>call fzf#vim#history({
            \ 'options' : [
            \   '--prompt', 'History> ',
            \   '--preview-window', <SID>get_preview_position(),
            \   '--preview', <SID>get_file_preview_command(),
            \ ]
            \ })<CR>

      function! s:fzf_some_files() abort
        let pwd = expand('%:p:h')
        let git_dir = finddir('.git', pwd . ';')

        if isdirectory(git_dir)
          let pickup = printf('git --git-dir="%s" ls-files -co --exclude-standard', git_dir)
        elseif executable('rg')
          let pickup = printf('rg --color never --max-depth 5 --files "%s"', pwd)
        elseif executable('fd')
          let pickup = printf('fd -a -d 5 -p -t f -c never "%s"', pwd)
        endif

        " get files
        let files = split(system(pickup))

        " get history
        let history = filter(copy(v:oldfiles), 'filereadable(fnamemodify(v:val, ":p"))')

        let layout = deepcopy(g:fzf_layout)
        let options = extend(layout, {
              \ 'source' : uniq(sort(files + history)),
              \ 'sink' : 'edit',
              \ 'down' : '60%',
              \ 'dir' : simplify(git_dir . '/..'),
              \ 'options' : [
              \   '--prompt', 'Mixed> ',
              \   '--preview-window', s:get_preview_position(),
              \   '--preview', s:get_file_preview_command(),
              \ ],
              \ })

        " some kind files, history
        call fzf#run(options)
      endfunction

      function! s:fzf_some_dirs() abort
        let pwd = expand('%:p:h')
        let git_dir = finddir('.git', pwd . ';')

        if isdirectory(git_dir)
          let pickup = printf('git --git-dir="%s" ls-tree -dr --name-only HEAD', git_dir)
        elseif executable('fd')
          let pickup = printf('fd -a -d 5 -p -t d -c never "%s"', pwd)
        endif

        " get dirs
        let dirs = split(system(pickup))

        " get history
        let history = filter(
              \ copy(map(copy(v:oldfiles), 'fnamemodify(v:val, ":p:h")')),
              \ 'isdirectory(v:val)')

        let repos = executable('ghq') ? split(system('ghq list -p')) : []

        let layout = deepcopy(g:fzf_layout)
        let options = extend(layout, {
              \ 'source' : uniq(sort(dirs + history + repos)),
              \ 'sink' : 'Explore!',
              \ 'down' : '60%',
              \ 'dir' : simplify(git_dir . '/..'),
              \ 'options' : [
              \   '--prompt', 'Mixed> ',
              \   '--preview-window', s:get_preview_position(),
              \   '--preview', 'eval "cd {} && find . -maxdepth 1 -print"',
              \ ],
              \ })

        " some kind files, history
        call fzf#run(options)
      endfunction

      " nnoremap <silent> <C--> :<C-u>FzfGfiles<CR>
      nnoremap <silent> <C-p> :<C-u>call <SID>fzf_some_files()<CR>
      " nnoremap <silent> <C-i> :<C-u>call <SID>fzf_some_dirs()<CR>
    endfunction

    call dein#add('junegunn/fzf', {
          \ 'build' : './install --bin',
          \ 'lazy' : 1,
          \ 'merged' : 0
          \ })
    call dein#add('junegunn/fzf.vim', {
          \ 'depends' : [
          \   'fzf',
          \ ],
          \ 'hook_add' : function('s:hook_add_junegunn_fzf'),
          \ 'hook_source' : function('s:hook_source_junegunn_fzf'),
          \ 'if' : 'v:version >= 704 && dein#tap("fzf") && 0',
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'Fzf',
          \   '<Plug>(fzf-',
          \ ],
          \ 'on_map' : [
          \   '<C-p>',
          \   ',ub',
          \   ',uf',
          \   ',ug',
          \   ',ul',
          \   ',um',
          \ ],
          \ })
    " }}}

    " mattn/ctrlp-matchfuzzy {{{
    call dein#add('mattn/ctrlp-matchfuzzy', {
          \ 'if' : 'exists("?matchfuzzy")',
          \ 'lazy' : 1,
          \ })
    " }}}

    " ctrlpvim/ctrlp.vim {{{
    function! s:hook_add_ctrlpvim() abort
      " <C-p>のコマンドを変更する
      let g:ctrlp_cmd = 'CtrlPMixed'

      " NOTE: https://kamiya555.github.io/2016/07/24/vim-ctrlp/
      " キャッシュディレクトリ
      let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
      " キャッシュを終了時に削除しない
      let g:ctrlp_clear_cache_on_exit = 0
      " キー入力があってから16ms後に更新する
      " 1000 / 60 = 16.666666666666667 : 60FPS
      " let g:ctrlp_lazy_update = 16
      " ルートパスと認識させるためのファイル
      let g:ctrlp_root_markers = [
            \ '.git',
            \ '.hg',
            \ '.svn',
            \ '.bzr',
            \ '_darcs',
            \ 'Gemfile',
            \ 'package.json',
            \ ]

      if dein#tap('ctrlp-matchfuzzy')
        " マッチャーを変更する
        let g:ctrlp_match_func = { 'match' : 'ctrlp_matchfuzzy#matcher' }
      endif

      " ドットで始まるファイルやディレクトリを表示する
      let g:ctrlp_show_hidden = 1
      " ウィンドウに関する設定
      let g:ctrlp_match_window = 'bottom,order:ttb,min:25,max:25,results:25'

      " スペースを無視する
      " https://github.com/ctrlpvim/ctrlp.vim/issues/196
      let g:ctrlp_abbrev = {
            \ 'gmode' : 'i',
            \ 'abbrevs' : [
            \   {
            \     'pattern' : ' ',
            \     'expanded' : '',
            \     'mode' : 'fprz',
            \   },
            \ ],
            \ }

      " 無視するディレクトリの正規表現の一部
      let ignore_dirs = 'bower_components|node_modules|vendor'
      " 無視するドットで始まるディレクトリの正規表現の一部
      let ignore_dot_dirs = 'git|hg|svn|bundle|sass-cache|node-gyp|cache'
      " 無視するファイルの正規表現の一部
      let ignore_files = 'exe|so|dll|bmp|gif|ico|jpe?g|png|webp|ai|psd'

      " 無視するファイルとディレクトリの設定
      let g:ctrlp_custom_ignore = {
            \ 'dir' : printf('\v[\/]%%(%%(%s)|\.%%(%s))$', ignore_dirs, ignore_dot_dirs),
            \ 'file' : printf('\v\.%%(%s)$', ignore_files),
            \ }

      " 外部コマンドを使うのでキャッシュしない
      let g:ctrlp_use_caching = 0

      " 外部コマンドを使って高速にファイルを列挙する
      let g:ctrlp_user_command_async = 1
      let g:ctrlp_user_command = {
            \ 'types' : {
            \   1 : ['.git', 'cd %s && git ls-files -co --exclude-standard'],
            \ },
            \ 'fallback' :
            \    executable('fd') ? 'fd --type f --color never --full-path %s' :
            \    executable('rg') ? 'rg --color never --smart-case --files %s' :
            \    executable('pt') ? 'pt --nocolor --nogroup --files-with-matches %s' :
            \   'find %s -type f -print',
            \ }

      " キーマッピングを変更する
      let g:ctrlp_prompt_mappings = {
            \ 'PrtSelectMove("j")' : ['<C-n>', '<Down>'],
            \ 'PrtSelectMove("k")' : ['<C-p>', '<Up>'],
            \ 'PrtHistory(-1)' : ['<C-j>'],
            \ 'PrtHistory(1)' : ['<C-k>'],
            \ 'YankLine()' : ['<C-y>'],
            \ 'CreateNewFile()' : [],
            \ }
    endfunction

    function! s:ctrlp_grep(pattern) abort
      let git_dir = finddir('.git', '.;')

      if &grepprg =~# '\v^(rg|pt)' && len(git_dir) != 0
        let ignore = ''

        if &grepprg =~# '\v^rg'
          " ripgrepで.gitを無視する
          let ignore = '--glob !.git'
        elseif &grepprg =~# '\v^pt'
          " ptで.gitを無視する
          let ignore = '--ignore .git'
        endif

        execute printf(
              \ 'silent! grep! %s %s -- %s | redraw! | CtrlPQuickfix',
              \ ignore,
              \ a:pattern,
              \ simplify(git_dir . '/..'),
              \ )
      else 
        execute printf('silent! grep! %s | redraw! | CtrlPQuickfix', a:pattern)
      endif
    endfunction

    function! s:hook_source_ctrlpvim() abort
      " CtrlPGrepを定義する
      command! -nargs=1 CtrlPGrep call <SID>ctrlp_grep(<f-args>)

      " ,ubでバッファ一覧
      nnoremap ,ub :<C-u>CtrlPBuffer<CR>
      " ,ugでgrepをする
      nnoremap ,ug :<C-u>CtrlPGrep<Space>
      " ,ulで行一覧
      nnoremap ,ul :<C-u>CtrlPLine<CR>
      " ,umで最近開いたファイル一覧
      nnoremap ,um :<C-u>CtrlPMRUFiles<CR>
    endfunction

    call dein#add('ctrlpvim/ctrlp.vim', {
          \ 'depends' : exists('?matchfuzzy') ? ['ctrlp-matchfuzzy'] : [],
          \ 'hook_add' : function('s:hook_add_ctrlpvim'),
          \ 'hook_source' : function('s:hook_source_ctrlpvim'),
          \ 'if' : 'v:version >= 700 && !dein#tap("fzf.vim")',
          \ 'lazy' : 1,
          \ 'on_cmd' : '<Plug>(CtrlP',
          \ 'on_map' : [
          \   '<C-p>',
          \   ',ub',
          \   ',ug',
          \   ',ul',
          \   ',um',
          \ ],
          \ })
    " }}}

    " dense-analysis/ale {{{
    function! s:hook_add_ale() abort
      " 明示的に指定する
      let g:ale_linters_explicit = 1

      " aleで入力補完をしない
      let g:ale_completion_enabled = 0

      " aleでLSPを使わない
      let g:ale_disable_lsp = 1

      " プレビューでメッセージを表示する
      let g:ale_hover_to_preview = 1

      " 保存した時にlintする
      let g:ale_lint_on_save = 1

      " 編集してもlintしない
      let g:ale_lint_on_text_changed = 'never'

      " 挿入モードから離れたらlintする
      let g:ale_lint_on_insert_leave = 1

      " 無視するファイルの設定
      let g:ale_pattern_options = {
            \ '\.d\.ts$' : { 'ale_enabled' : 0 },
            \ '\.min\.js$' : { 'ale_enabled' : 0 }
            \ }

      " linterの設定
      let g:ale_linters = {
            \ 'css' : ['stylelint'],
            \ 'javascript' : ['eslint'],
            \ 'javascript.jsx' : ['eslint'],
            \ 'javascriptreact' : ['eslint'],
            \ 'json' : [],
            \ 'scss' : ['stylelint'],
            \ 'typescript' : ['eslint', 'tslint', 'tsserver'],
            \ 'typescriptreact' : ['eslint', 'tslint', 'tsserver'],
            \ }

      " fixerの設定
      let g:ale_fixers = {
            \ 'css' : ['prettier'],
            \ 'javascript' : ['prettier'],
            \ 'javascript.jsx' : ['prettier'],
            \ 'javascriptreact' : ['prettier'],
            \ 'json' : ['prettier'],
            \ 'scss' : ['prettier'],
            \ 'typescript' : ['prettier'],
            \ 'typescriptreact' : ['prettier'],
            \ }
    endfunction

    function! s:hook_source_ale() abort
      " eslintでの検査はキャッシュを使い、エラーが多いときは中断する
      autocmd vimrc FileType javascript,javascriptreact,typescript,typescriptreact,vue
            \  let b:ale_javascript_eslint_options = '--cache --max-warnings 20'

      " JSONならprettierのパーサにjson-stringifyを使用する
      autocmd vimrc FileType json let b:ale_javascript_prettier_options = '--parser json-stringify'

      " 保存時fixする
      autocmd vimrc FileType css,scss,json,javascript,javascriptreact,typescript,typescriptreact
            \ let b:ale_fix_on_save = 1

      " eslint-plugin-prettierがインストールされていたらそちらをfixerとして使う
      function! s:fix_with_eslint_plugin_prettier(dir) abort
        let node_modules_dir = fnamemodify(
              \ finddir('node_modules', a:dir . ';'),
              \ ':p')

        if empty(node_modules_dir)
          return
        endif

        let modules = ['eslint', 'eslint-plugin-prettier', 'prettier']
        let module_dirs = map(
              \ copy(modules),
              \ 'node_modules_dir . v:val'
              \ )
        let exist_dirs = filter(
              \ copy(module_dirs),
              \ 'isdirectory(v:val)'
              \ )

        if len(exist_dirs) != len(modules)
          return
        endif

        let b:ale_fixers = {
              \ 'javascript' : ['eslint'],
              \ 'javascriptreact' : ['eslint'],
              \ 'javascript.jsx' : ['eslint'],
              \ 'typescript' : ['eslint'],
              \ 'typescriptreact' : ['eslint'],
              \ }
      endfunction

      autocmd vimrc FileType javascript,javascriptreact,typescript,typescriptreact
            \ call s:fix_with_eslint_plugin_prettier(expand('%:p:h'))

      " ファイルのカレントディレクトリから実行する
      " monorepo毎に.eslintignoreがある場合などに有効
      " autocmd vimrc BufNewFile,BufRead * let b:ale_command_wrapper = printf("cd '%s' && %s", expand("%:p:h"), '%*')

      function! s:ale_buffer_setup() abort
        " エラーのある行に移動する
        nnoremap <buffer><silent> [g :<C-u>ALENextWrap<CR>
        nnoremap <buffer><silent> ]g :<C-u>ALEPreviousWrap<CR>

        " 現在のバッファで有効・無効を切り替える
        nnoremap <buffer> ,ad :<C-u>ALEDisableBuffer<CR>
        nnoremap <buffer> ,ae :<C-u>ALEEnableBuffer<CR>

        " ALEの有効・無効を切り替える
        nnoremap <buffer> ,aD :<C-u>ALEDisable<CR>
        nnoremap <buffer> ,aE :<C-u>ALEEnable<CR>
      endfunction

      autocmd vimrc FileType css,javascript,javascript.jsx,javascriptreact,json,scss,typescript,typescriptreact
            \ call s:ale_buffer_setup()
    endfunction

    call dein#add('dense-analysis/ale', {
          \ 'hook_add' : function('s:hook_add_ale'),
          \ 'hook_source' : function('s:hook_source_ale'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'css',
          \   'javascript',
          \   'javascript.jsx',
          \   'javascriptreact',
          \   'json',
          \   'scss',
          \   'typescript',
          \   'typescriptreact',
          \ ],
          \ })
    " }}}

    " prabirshrestha/vim-lsp {{{
    function! s:hook_add_vim_lsp() abort
      " 補完する際のドキュメントの表示を5秒後にする
      let g:lsp_completion_documentation_delay = 5000

      " LSPでの診断を無効化する
      let g:lsp_diagnostics_enabled = 0

      " カーソル位置の診断結果を表示する
      " let g:lsp_diagnostics_echo_cursor = 1
      " カーソル位置の診断結果を瞬時に表示する
      " let g:lsp_diagnostics_echo_delay = 0
      " 診断結果をフロートウィンドウで瞬時に表示する
      " let g:lsp_diagnostics_float_delay = 0

      " 変数などのハイライト(highlight reference)を無効化する
      let g:lsp_diagnostics_highlights_enabled = 0

      " 診断結果のサイン文字列を変更する similar to ALE
      " let g:lsp_diagnostics_signs_error = { 'text' : '>>' }
      " let g:lsp_diagnostics_signs_warning = { 'text' : '--' }
      " let g:lsp_diagnostics_signs_information = { 'text' : '--' }
      " let g:lsp_diagnostics_signs_hint = { 'text' : '--' }
      " 診断結果のサインを瞬時に表示する
      " let g:lsp_diagnostics_signs_delay = 0
      " バーチャルテキストを瞬時に表示する
      " let g:lsp_diagnostics_virtual_text_delay = 0

      " コードアクションのサインを表示しない
      let g:lsp_document_code_action_signs_enabled = 0
      " ドキュメントのハイライトを無効化する
      let g:lsp_document_highlight_enabled = 0

      " ドキュメントフォーマットのタイムアウトを1秒にする
      " let g:lsp_format_sync_timeout = 1000

      " 白いサインを黄色くする
      " highlight link LspInformationText Todo
      " highlight link LspHintText Todo

      " autocmd vimrc BufWritePre *.{cjs,js,jsx,mjs,pac,ts,tsx}
      "       \ call execute('LspDocumentFormatSync --server=efm-langserver')

      function! s:lsp_buffer_setup() abort
        if exists('+omnifunc')
          setlocal omnifunc=lsp#complete
        endif

        if exists('+tagfunc')
          setlocal tagfunc=lsp#tagfunc
        endif

        nmap <buffer> ,ld <Plug>(lsp-definition)
        nmap <buffer> ,ls <Plug>(lsp-document-symbol-search)
        nmap <buffer> ,lS <Plug>(lsp-workspace-symbol-search)
        nmap <buffer> ,lr <Plug>(lsp-references)
        nmap <buffer> ,li <Plug>(lsp-implementation)
        nmap <buffer> ,lt <Plug>(lsp-type-definition)
        nmap <buffer> ,lR <Plug>(lsp-rename)
        " nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
        " nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
        nmap <buffer> K <Plug>(lsp-hover)
      endfunction

      augroup lsp_install
        autocmd!
        autocmd User lsp_buffer_enabled call s:lsp_buffer_setup()
      augroup END
    endfunction

    call dein#add('prabirshrestha/vim-lsp', {
          \ 'hook_add' : function('s:hook_add_vim_lsp'),
          \ })
    " }}}

    " mattn/vim-lsp-settings {{{
    function! s:hook_post_source_vim_lsp_settings() abort
      " if has('win32')
      "   let servers_dir = expand('$LOCALAPPDATA/vim-lsp-settings/servers')
      " elseif $XDG_DATA_HOME !=# ''
      "   let servers_dir = expand('$XDG_DATA_HOME/vim-lsp-settings/servers')
      " else
      "   let servers_dir = expand('~/.local/share/vim-lsp-settings/servers')
      " endif

      " let servers = [
      "       \ 'css-languageserver',
      "       \ 'html-languageserver',
      "       \ 'json-languageserver',
      "       \ 'typescript-language-server',
      "       \ 'vim-language-server',
      "       \ 'yaml-language-server',
      "       \ ]

      " for server in servers
      "   if !isdirectory(servers_dir . '/' . server)
      "     execute('LspInstallServer ' . server)
      "   endif
      " endfor
    endfunction

    call dein#add('mattn/vim-lsp-settings', {
          \ 'depends' : [
          \   'vim-lsp',
          \ ],
          \ 'hook_post_source' : function('s:hook_post_source_vim_lsp_settings'),
          \ })
    " }}}

    " prabirshrestha/asyncomplete.vim {{{
    function! s:hook_add_asyncomplete_vim() abort
      inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
      inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
      inoremap <silent><expr> <CR> pumvisible() ? asyncomplete#close_popup() : "\<CR>"
      inoremap <silent><expr> <C-k> <Plug>(asyncomplete_force_refresh)
    endfunction

    call dein#add('prabirshrestha/asyncomplete.vim', {
          \ 'hook_add' : function('s:hook_add_asyncomplete_vim'),
          \ })
    " }}}

    " prabirshrestha/asyncomplete-lsp.vim {{{
    call dein#add('prabirshrestha/asyncomplete-lsp.vim', {
          \ 'depends' : [
          \   'asyncomplete.vim',
          \   'vim-lsp',
          \ ],
          \ })
    " }}}

    " tokorom/asyncomplete-dictionary.vim {{{
    function! s:hook_add_asyncomplete_dictionary_vim() abort
      autocmd vimrc User asyncomplete_setup call asyncomplete#register_source({
          \ 'name': 'dictionary',
          \ 'allowlist': ['*'],
          \ 'completor': function('asyncomplete#sources#dictionary#completor'),
          \ })
    endfunction

    call dein#add('tokorom/asyncomplete-dictionary.vim', {
          \ 'depends' : [
          \   'asyncomplete.vim',
          \ ],
          \ 'hook_add' : function('s:hook_add_asyncomplete_dictionary_vim'),
          \ })
    " }}}

    " editorconfig/editorconfig-vim {{{
    call dein#add('editorconfig/editorconfig-vim')
    " }}}

    " junegunn/vim-easy-align {{{
    function! s:hook_post_source_vim_easy_align() abort
      " Start interactive EasyAlign in visual mode (e.g. vipga)
      xmap ga <Plug>(EasyAlign)
      " Start interactive EasyAlign for a motion/text object (e.g. gaip)
      nmap ga <Plug>(EasyAlign)
    endfunction

    call dein#add('junegunn/vim-easy-align', {
          \ 'hook_post_source' : function('s:hook_post_source_vim_easy_align'),
          \ })
    " }}}

    " itchyny/lightline.vim {{{
    call dein#add('itchyny/lightline.vim')
    " }}}

    " itchyny/vim-parenmatch {{{
    function! s:hook_source_vim_parenmatch() abort
      let g:parenmatch_highlight = 0

      " parenmatchの強調表示にmatchparenの色を使う
      highlight default link ParenMatch MatchParen
    endfunction

    call dein#add('itchyny/vim-parenmatch', {
          \ 'hook_source' : function('s:hook_source_vim_parenmatch')
          \ })
    " }}}

    " thinca/vim-quickrun {{{
    call dein#add('thinca/vim-quickrun', {
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'QuickRun',
          \   '<Plug>(quick',
          \ ],
          \ 'on_map' : '<Leader>r',
          \ })
    " }}}

    " thinca/vim-qfreplace {{{
    call dein#add('thinca/vim-qfreplace', {
          \ 'lazy' : 1,
          \ 'on_cmd' : 'Qfreplace',
          \ })
    " }}}

    " othree/eregex.vim {{{
    function! s:hook_source_eregex_vim() abort
      " キーマップの変更を行なわない
      let g:eregex_default_enable = 0
    endfunction

    call dein#add('othree/eregex.vim', {
          \ 'hook_source' : function('s:hook_source_eregex_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'E2v',
          \   'M',
          \   'S',
          \   'G',
          \   'G!',
          \   'V',
          \ ],
          \ 'on_func' : [
          \   'E2v',
          \ ],
          \ 'on_event' : 'CmdlineEnter',
          \ })
    " }}}

    " kana/vim-gf-user {{{
    function! GfImport() abort
      let path = expand('<cfile>')

      if path !~# '^\.\.\?'
        return 0
      endif

      let completions = [
            \   '.tsx',
            \   '.ts',
            \   '.mjs',
            \   '.cjs',
            \   '.jsx',
            \   '.js',
            \   '.json',
            \ ]

      let dir = simplify(expand('%:p:h') . '/' . path)

      for completion in completions
        let test = resolve(dir . completion)

        if filereadable(test)
          return {
                \ 'path' : test,
                \ 'line' : 0,
                \ 'col' : 0,
                \ }
        endif
      endfor

      return 0
    endfunction

    function! s:hook_post_source_vim_gf_user() abort
      call gf#user#extend('GfImport', 1000)
    endfunction

    call dein#add('kana/vim-gf-user', {
          \ 'lazy' : 1,
          \ 'hook_post_source' : function('s:hook_post_source_vim_gf_user'),
          \ 'if' : 0,
          \ 'on_ft' : [
          \   'javascript',
          \   'javascriptreact',
          \   'javascript.jsx',
          \   'typescript',
          \   'typescriptreact',
          \ ],
          \ })
    " }}}

    " kana/vim-operator-user {{{
    call dein#add('kana/vim-operator-user', {
          \ 'lazy' : 1,
          \ })
    " }}}

    " rhysd/vim-operator-surround {{{
    function! s:hook_source_vim_operator_surround() abort
      " map from https://github.com/rhysd/vim-operator-surround
      map <silent>sa <Plug>(operator-surround-append)
      map <silent>sd <Plug>(operator-surround-delete)
      map <silent>sr <Plug>(operator-surround-replace)
      nmap <silent>sbd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
      nmap <silent>sbr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
    endfunction

    " kana/vim-operator-userに依存している
    call dein#add('rhysd/vim-operator-surround', {
          \ 'depends' : [
          \   'vim-operator-user',
          \ ],
          \ 'hook_source' : function('s:hook_source_vim_operator_surround'),
          \ 'lazy' : 1,
          \ 'on_cmd' : '<Plug>(operator-surround-',
          \ 'on_map' : [
          \   'sa',
          \   'sd',
          \   'sr',
          \   'sbd',
          \   'sbr',
          \ ],
          \ })
    " }}}

    " tyru/operator-camelize.vim {{{
    function! s:hook_source_operator_camelize() abort
      vmap <silent>c <Plug>(operator-camelize)
      vmap <silent>_ <Plug>(operator-decamelize)
    endfunction

    " kana/vim-operator-userに依存している
    call dein#add('tyru/operator-camelize.vim', {
          \ 'depends' : [
          \   'vim-operator-user',
          \ ],
          \ 'hook_source' : function('s:hook_source_operator_camelize'),
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   '<Plug>(operator-camelize-',
          \   '<Plug>(operator-decamelize-',
          \ ],
          \ 'on_map' : [
          \   'c',
          \   '_',
          \ ],
          \ })
    " }}}

    " mattn/gist-vim {{{
    function! s:hook_add_gist_vim() abort
      nnoremap ,gd :<C-u>Gist -d<CR>
      nnoremap ,ge :<C-u>Gist -s<Space>
      nnoremap ,gf :<C-u>Gist -f<CR>
      nnoremap ,gl :<C-u>Gist -l<CR>
      nnoremap ,gmp :<C-u>Gist -m -p -s<Space>
      nnoremap ,gmP :<C-u>Gist -m -P -s<Space>
      nnoremap ,gp :<C-u>Gist -p -s<Space>
      nnoremap ,gP :<C-u>Gist -P -s<Space>
    endfunction

    function! s:hook_source_gist_vim() abort
      " 複数ファイルを取得する
      let g:gist_get_multiplefile = 1
    endfunction

    call dein#add('mattn/webapi-vim', {
          \ 'lazy' : 1,
          \ })
    call dein#add('mattn/gist-vim', {
          \ 'depends' : 'webapi-vim',
          \ 'hook_add' : function('s:hook_add_gist_vim'),
          \ 'hook_source' : function('s:hook_source_gist_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : 'Gist',
          \ })
    " }}}

    " tyru/open-browser.vim {{{
    function! s:hook_source_open_browser_vim() abort
      let g:netrw_nogx = 1
      nmap gx <Plug>(openbrowser-smart-search)
      vmap gx <Plug>(openbrowser-smart-search)
    endfunction

    call dein#add('tyru/open-browser.vim', {
          \ 'hook_source' : function('s:hook_source_open_browser_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'OpenBrowser',
          \   'OpenBrowserSearch',
          \   'OpenBrowserSmartSearch',
          \   '<Plug>(openbrowser-',
          \ ],
          \ 'on_map' : 'gx',
          \ })
    " }}}

    " sasaplus1/ameba-color-palette.dict {{{
    function! s:hook_post_source_ameba_color_palette_dict() abort
      " ameba-color-palette.dictの設定をバッファに指定する
      function! s:setup_ameba_color_palette_dict() abort
        let dict_dir = dein#get('ameba-color-palette.dict').path
        let dict_file = resolve(dict_dir . '/dict/ameba-color-palette.dict')

        execute 'setlocal' 'iskeyword+=-' 'dictionary+=' . dict_file
      endfunction

      autocmd vimrc FileType css,scss call s:setup_ameba_color_palette_dict()
    endfunction

    call dein#add('sasaplus1/ameba-color-palette.dict', {
          \ 'hook_post_source' : function('s:hook_post_source_ameba_color_palette_dict'),
          \ })
    " }}}

    " digitaltoad/vim-pug {{{
    call dein#add('digitaltoad/vim-pug', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'pug',
          \ ],
          \ })
    " }}}

    " hail2u/vim-css3-syntax {{{
    call dein#add('hail2u/vim-css3-syntax', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'css',
          \   'html',
          \   'scss',
          \ ],
          \ })
    " }}}

    " cespare/vim-toml {{{
    call dein#add('cespare/vim-toml', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'toml',
          \ ],
          \ })
    " }}}

    " othree/html5.vim {{{
    function! s:hook_add_html5_vim() abort
      " *.ejsと*.vueのファイルタイプをHTMLとする
      autocmd vimrc BufNewFile,BufRead *.{ejs,vue} setlocal filetype=html
    endfunction

    call dein#add('othree/html5.vim', {
          \ 'hook_add' : function('s:hook_add_html5_vim'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'html',
          \   'php',
          \ ],
          \ })
    " }}}

    " pangloss/vim-javascript {{{
    function! s:hook_source_vim_javascript() abort
      " JSDocのハイライトを有効化する
      let g:javascript_plugin_jsdoc = 1
    endfunction

    call dein#add('pangloss/vim-javascript', {
          \ 'hook_source' : function('s:hook_source_vim_javascript'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'javascript',
          \   'javascriptreact',
          \ ],
          \ })
    " }}}

    " styled-components/vim-styled-components {{{
    call dein#add('styled-components/vim-styled-components', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'javascript',
          \   'javascriptreact',
          \   'typescript',
          \   'typescriptreact',
          \ ],
          \ })
    " }}}

    " MaxMEllon/vim-jsx-pretty {{{
    call dein#add('MaxMEllon/vim-jsx-pretty', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'javascript',
          \   'javascriptreact',
          \ ],
          \ })
    " }}}

    " leafgarland/typescript-vim {{{
    call dein#add('leafgarland/typescript-vim', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'typescript',
          \   'typescriptreact',
          \ ],
          \ })
    " }}}

    " vim-jp/vimdoc-ja {{{
    call dein#add('vim-jp/vimdoc-ja')
    " }}}

    call dein#end()
  endif

  if dein#check_install()
    call dein#install()
  endif

  " sourceフックを呼ぶ
  call dein#call_hook('source')

  " post_sourceフックを呼ぶようにする
  autocmd vimrc VimEnter * call dein#call_hook('post_source')

  unlet s:plugin_dir
  unlet s:dein_repos

endif

if has('syntax')
  " シンタックスハイライト
  syntax enable
endif

filetype plugin indent on

" }}}

" vim:ft=vim:fdm=marker:fen:
