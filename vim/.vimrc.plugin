" dein.vim {{{

if (v:version >= 704 || has('nvim')) && executable('git')

  let s:plugin_dir = $HOME . '/.vim/dein'
  let s:dein_repos = s:plugin_dir . '/repos/github.com/Shougo/dein.vim'

  if !isdirectory(s:dein_repos)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repos
  endif

  execute 'set runtimepath&'
  execute 'set runtimepath+=' . s:dein_repos

  if dein#load_state(s:plugin_dir)
    call dein#begin(s:plugin_dir)

    " Shougo/dein.vim {{{
    function! s:hook_source_dein_vim() abort
      " ,nuでプラグインをアップデートする
      nnoremap ,nu :<C-u>call dein#update()<CR>
    endfunction

    call dein#add(s:dein_repos, {
          \ 'hook_source' : function('s:hook_source_dein_vim'),
          \ })
    " }}}

    " Shougo/vimfiler {{{
    function! s:hook_post_update_vimproc_vim() abort
      if has('win32') || has('win64')
        let l:make = 'tools\\update-dll-mingw'
      elseif has('win32unix')
        let l:make = 'make -f make_cygwin.mak'
      elseif executable('gmake')
        let l:make = 'gmake'
      else
        let l:make = 'make'
      endif

      let l:command = join(['cd', '"' . dein#get('vimproc.vim').path . '"', '&&', l:make])

      call system(l:command)
    endfunction

    function! s:hook_post_source_vimfiler() abort
      " デフォルト設定を指定する
      call vimfiler#custom#profile('default', 'context', {
            \ 'safe' : 0
            \ })
    endfunction

    function! s:hook_source_vimfiler() abort
      " デフォルトのファイラにする
      let g:vimfiler_as_default_explorer = 1
      " 最大記憶ディレクトリ履歴を100にする
      let g:vimfiler_max_directories_history = 100

      " NOTE: 遅延読み込みされた後にキーマップを設定する

      " F4と,vfで表示
      nnoremap <F4> :<C-u>VimFilerBufferDir<CR>
      nnoremap ,vf :<C-u>VimFilerBufferDir<CR>
      " Shift-F4と,vFとTでエクスプローラ風の表示
      nnoremap <S-F4> :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -toggle -no-quit<CR>
      nnoremap ,vF :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -toggle -no-quit<CR>
      nnoremap T :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -toggle -no-quit<CR>
    endfunction

    call dein#add('Shougo/vimproc.vim', {
          \ 'hook_post_update' : function('s:hook_post_update_vimproc_vim'),
          \ 'lazy' : 1,
          \ })
    call dein#add('Shougo/unite.vim', {
          \ 'depends' : 'vimproc.vim',
          \ 'lazy' : 1,
          \ })
    call dein#add('Shougo/vimfiler', {
          \ 'depends' : [
          \   'unite.vim',
          \   'vimproc.vim',
          \ ],
          \ 'hook_post_source' : function('s:hook_post_source_vimfiler'),
          \ 'hook_source' : function('s:hook_source_vimfiler'),
          \ 'lazy' : 1,
          \ 'on_map' : [
          \   '<F4>',
          \   ',vf',
          \   '<S-F4>',
          \   ',vF',
          \   'T',
          \ ],
          \ 'on_path' : '.*',
          \ })
    " }}}

"    " Shougo/denite.nvim & Shougo/neomru.vim {{{
"    function! s:hook_add_denite_nvim() abort
"      " Ctrl-pで使用するソース
"      let l:sources = [
"            \ 'buffer',
"            \  "`finddir('.git', ';') != '' ? 'file_rec/git' : 'file_rec'`",
"            \ ]
"
"      if dein#tap('neomru.vim')
"        " Ctrl-F2と,umで最近開いたファイル一覧
"        nnoremap <C-F2> :<C-u>Denite file_mru<CR>
"        nnoremap ,um :<C-u>Denite file_mru<CR>
"
"        " Ctrl-pにfile_mruのソースを追加する
"        call add(l:sources, 'file_mru')
"      endif
"
"      if dein#tap('vim-denite-ghq')
"        " Ctrl-pにghqのソースを追加する
"        call add(l:sources, 'ghq')
"      endif
"
"      " Ctrl-pでカレントディレクトリからファイルの一覧などを表示
"      execute 'nnoremap <C-p> :<C-u>Denite ' . join(l:sources, ' ') . '<CR>'
"
"      " ,ulで行一覧
"      nnoremap ,ul :<C-u>Denite line<CR>
"
"      " ,uyでレジスタ一覧
"      nnoremap ,uy :<C-u>Denite register<CR>
"
"      " F2と,ubでバッファ一覧
"      nnoremap <F2> :<C-u>Denite buffer<CR>
"      nnoremap ,ub :<C-u>Denite buffer<CR>
"    endfunction
"
"    function! s:hook_post_source_denite_nvim() abort
"      " ptを使った検索を設定する
"      if executable('pt')
"        call denite#custom#var('file_rec', 'command', [
"              \ 'pt', '--follow', '--nocolor', '--nogroup', '-g:', '',
"              \ ])
"        call denite#custom#var('grep', 'command', ['pt'])
"        call denite#custom#var('grep', 'default_opts', [
"              \ '--nogroup', '--nocolor', '--smart-case',
"              \ ])
"        call denite#custom#var('grep', 'recursive_opts', [])
"        call denite#custom#var('grep', 'pattern_opt', [])
"        call denite#custom#var('grep', 'separator', ['--'])
"        call denite#custom#var('grep', 'final_opts', [])
"      endif
"
"      "call denite#custom#alias('filter', 'matcher_ignore_globs', 'additional_matcher_ignore_globs')
"      "call denite#custom#var('filter', 'additional_matcher_ignore_globs', [])
"
"      " file_rec/gitのsourceを作る
"      call denite#custom#alias('source', 'file_rec/git', 'file_rec')
"      call denite#custom#var('file_rec/git', 'command', [
"            \ 'bash', '-c', 'git ls-files -co --exclude-standard "$(git rev-parse --show-toplevel)"',
"            \ ])
"
"      " 挿入モードでもCtrl-n, Ctrl-pで行を移動できるようにする
"      call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
"      call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')
"    endfunction
"
"    call dein#add('Shougo/neomru.vim', {
"          \ 'lazy' : 1,
"          \ })
"    call dein#add('Jagua/vim-denite-ghq', {
"          \ 'lazy' : 1,
"          \ 'on_if' : 'has("python3") && executable("ghq")',
"          \ })
"    call dein#add('Shougo/denite.nvim', {
"          \ 'depends' : [
"          \   'neomru.vim',
"          \   'vim-denite-ghq',
"          \ ],
"          \ 'hook_add' : function('s:hook_add_denite_nvim'),
"          \ 'hook_post_source' : function('s:hook_post_source_denite_nvim'),
"          \ 'lazy' : 1,
"          \ 'on_cmd' : '<Plug>(Denite',
"          \ 'on_if' : 'has("python3") && v:version >= 800',
"          \ })
"    " }}}

    " Shougo/neocomplete.vim {{{
    function! s:hook_source_neocomplete_vim() abort
      " neocompleteを有効にする
      let g:neocomplete#enable_at_startup = 1
      " 入力に大文字を含む場合
      let g:neocomplete#enable_smart_case = 1
      " unite.vimのバッファの場合は補完しない
      let g:neocomplete#lock_buffer_name_pattern = '\*unite\*'

      let g:neocomplete#auto_completion_start_length = 1
      let g:neocomplete#sources#buffer#cache_limit_size = 50000

      if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
      endif
      let g:neocomplete#keyword_patterns._ = '\h\w*'

      "if !exists('g:neocomplete#sources')
      "  let g:neocomplete#sources = {}
      "endif
      "let g:neocomplete#sources._ = ['buffer']
      "let g:neocomplete#sources.javascript = ['buffer', 'omni']

      "if !exists('g:neocomplete#sources#omni#input_patterns')
      "  let g:neocomplete#sources#omni#input_patterns = {}
      "endif
      "let g:neocomplete#sources#omni#input_patterns.javascript = '[^. \t]\.\w*'

      " let g:neocomplete_omni_function_list = ['tern#Complete', 'jscomplete#CompleteJS']

      if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
      endif
      let g:neocomplete#force_omni_input_patterns.javascript = '[^. \t]\.\w*'

      " README.md - Setting examplesよりキーマップの変更
      inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"

      " 改行した際に補完を閉じる
      inoremap <expr><CR> neocomplete#smart_close_popup() . "\<CR>"

      " 補完を閉じ、文字を消す
      inoremap <expr><C-h> neocomplete#smart_close_popup() . "\<C-h>"
      inoremap <expr><BS> neocomplete#smart_close_popup() . "\<C-h>"

      inoremap <expr><C-g> neocomplete#undo_completion()
      inoremap <expr><C-l> neocomplete#complete_common_string()
    endfunction

    call dein#add('Shougo/neocomplete.vim', {
          \ 'on_if' : 'has("lua") && (v:version == 703 && has("patch885")) || v:version >= 704',
          \ 'hook_source' : function('s:hook_source_neocomplete_vim'),
          \ })
    " }}}

    " ctrlpvim/ctrlp.vim {{{
    function! s:hook_add_ctrlpvim_ctrlpvim() abort
      " <C-p>のコマンドを変更する
      let g:ctrlp_cmd = 'CtrlPMixed'

      " NOTE: https://kamiya555.github.io/2016/07/24/vim-ctrlp/
      " キャッシュディレクトリ
      let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
      " キャッシュを終了時に削除しない
      let g:ctrlp_clear_cache_on_exit = 0
      " 遅延再描画
      let g:ctrlp_lazy_update = 1
      " ルートパスと認識させるためのファイル
      let g:ctrlp_root_markers = ['Gemfile', 'package.json']
      " CtrlPのウィンドウ最大高さ
      let g:ctrlp_max_height = 20

      " 無視するディレクトリの正規表現の一部
      let l:ignore_dirs = 'bower_components|node_modules|vendor'
      " 無視するドットで始まるディレクトリの正規表現の一部
      let l:ignore_dot_dirs = 'git|hg|svn|bundle|sass-cache|node-gyp|cache'
      " 無視するファイルの正規表現の一部
      let l:ignore_files = 'exe|so|dll|bmp|gif|ico|jpe?g|png|webp|ai|psd'

      " 無視するファイルとディレクトリの設定
      let g:ctrlp_custom_ignore = {
            \ 'dir' : printf('\v[\/]%%(%%(%s)|\.%%(%s))$', l:ignore_dirs, l:ignore_dot_dirs),
            \ 'file' : printf('\v\.%%(%s)$', l:ignore_files),
            \ }

      " キーマッピングを変更する
      let g:ctrlp_prompt_mappings = {
            \ 'PrtSelectMove("j")' : ['<C-n>', '<Down>'],
            \ 'PrtSelectMove("k")' : ['<C-p>', '<Up>'],
            \ 'PrtHistory(-1)' : ['<C-j>'],
            \ 'PrtHistory(1)' : ['<C-k>'],
            \ }

      " ,umで最近開いたファイル一覧
      nnoremap ,um :<C-u>CtrlPMRUFiles<CR>
      " ,ulで行一覧
      nnoremap ,ul :<C-u>CtrlPLine<CR>
      " ,ubでバッファ一覧
      nnoremap ,ub :<C-u>CtrlPBuffer<CR>
    endfunction

    call dein#add('ctrlpvim/ctrlp.vim', {
          \ 'hook_add' : function('s:hook_add_ctrlpvim_ctrlpvim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : '<Plug>(CtrlP',
          \ 'on_if' : 'v:version >= 700',
          \ 'on_map' : '<C-p>',
          \ })
    " }}}

    " ternjs/tern_for_vim {{{
    function! s:hook_post_update_tern_for_vim() abort
      call system(printf('cd "%s" && npm install', dein#get('tern_for_vim').path))
    endfunction

    function! s:hook_source_tern_for_vim() abort
      if executable('tern')
        autocmd vimrc FileType javascript setlocal omnifunc=tern#Complete
      endif
    endfunction

    call dein#add('ternjs/tern_for_vim', {
          \ 'hook_post_update' : function('s:hook_post_update_tern_for_vim'),
          \ 'hook_source' : function('s:hook_source_tern_for_vim'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'javascript',
          \   'html',
          \ ],
          \ 'on_if' : 'v:version >= 703 && (has("python") || has("python3"))'
          \ })
    " }}}

    " teramako/jscomplete-vim {{{
    call dein#add('https://bitbucket.org/teramako/jscomplete-vim', {
          \ 'lazy' : 1
          \ })
    " }}}

    " othree/jspc.vim {{{
    call dein#add('othree/jspc.vim', {
          \ 'lazy' : 1
          \ })
    " }}}

    " editorconfig/editorconfig-vim {{{
    call dein#add('editorconfig/editorconfig-vim', {
          \ 'on_if' : 'has("python") || has("python3")',
          \ })
    " }}}

    " itchyny/lightline.vim {{{
    call dein#add('itchyny/lightline.vim')
    " }}}

    " thinca/vim-quickrun {{{
    call dein#add('thinca/vim-quickrun', {
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'QuickRun',
          \   '<Plug>(quick',
          \ ],
          \ 'on_map' : '<Leader>r',
          \ })
    " }}}

    " thinca/vim-qfreplace {{{
    call dein#add('thinca/vim-qfreplace', {
          \ 'lazy' : 1,
          \ 'on_cmd' : 'Qfreplace',
          \ })
    " }}}

    " othree/eregex.vim {{{
    function! s:hook_source_eregex_vim() abort
      " キーマップの変更を行なわない
      let g:eregex_default_enable = 0
    endfunction

    call dein#add('othree/eregex.vim', {
          \ 'hook_source' : function('s:hook_source_eregex_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'E2v',
          \   'M',
          \   'S',
          \   'G',
          \   'G!',
          \   'V',
          \ ],
          \ })
    " }}}

    " mattn/emmet-vim {{{
    call dein#add('mattn/emmet-vim', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'html',
          \   'xml',
          \ ],
          \ })
    " }}}

    " osyo-manga/vim-textobj-multiblock {{{
    function! s:hook_source_vim_textobj_multiblock() abort
      " map from http://d.hatena.ne.jp/osyo-manga/20130329/1364569153
      omap <silent>ab <Plug>(textobj-multiblock-a)
      omap <silent>ib <Plug>(textobj-multiblock-i)
      vmap <silent>ab <Plug>(textobj-multiblock-a)
      vmap <silent>ib <Plug>(textobj-multiblock-i)
    endfunction

    call dein#add('kana/vim-textobj-user', {
          \ 'lazy' : 1,
          \ })
    call dein#add('osyo-manga/vim-textobj-multiblock', {
          \ 'depends' : 'vim-textobj-user',
          \ 'hook_source' : function('s:hook_source_vim_textobj_multiblock'),
          \ 'lazy' : 1,
          \ 'on_cmd' : '<Plug>(textobj-multiblock-',
          \ 'on_event' : 'InsertEnter',
          \ 'on_map' : [
          \   'c',
          \   'd',
          \ ],
          \ })
"    call dein#add('osyo-manga/vim-textobj-multiblock', {
"          \ 'depends' : 'vim-textobj-user',
"          \ 'hook_source' : function('s:hook_source_vim_textobj_multiblock'),
"          \ 'lazy' : 1,
"          \ 'on_cmd' : '<Plug>(textobj-multiblock',
"          \ 'on_event' : 'InsertEnter',
"          \ 'on_map' : [
"          \   'c',
"          \   'd',
"          \ ],
"          \ })
    " }}}

    " rhysd/vim-operator-surround {{{
    function! s:hook_source_vim_operator_surround() abort
      " map from https://github.com/rhysd/vim-operator-surround
      map <silent>sa <Plug>(operator-surround-append)
      map <silent>sd <Plug>(operator-surround-delete)
      map <silent>sr <Plug>(operator-surround-replace)
      nmap <silent>sbd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
      nmap <silent>sbr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
    endfunction

    call dein#add('kana/vim-operator-user', {
          \ 'lazy' : 1,
          \ })
    call dein#add('rhysd/vim-operator-surround', {
          \ 'depends' : [
          \   'vim-operator-user',
          \   'vim-textobj-multiblock',
          \ ],
          \ 'hook_source' : function('s:hook_source_vim_operator_surround'),
          \ 'lazy' : 1,
          \ 'on_cmd' : '<Plug>(operator-surround-',
          \ 'on_event' : 'InsertEnter',
          \ })
    " }}}

    " mattn/gist-vim {{{
    function! s:hook_add_gist_vim() abort
      nnoremap ,gd :<C-u>Gist -d<CR>
      nnoremap ,ge :<C-u>Gist -s<Space>
      nnoremap ,gf :<C-u>Gist -f<CR>
      nnoremap ,gl :<C-u>Gist -l<CR>
      nnoremap ,gmp :<C-u>Gist -m -p -s<Space>
      nnoremap ,gmP :<C-u>Gist -m -P -s<Space>
      nnoremap ,gp :<C-u>Gist -p -s<Space>
      nnoremap ,gP :<C-u>Gist -P -s<Space>
    endfunction

    function! s:hook_source_gist_vim() abort
      " 複数ファイルを取得する
      let g:gist_get_multiplefile = 1
    endfunction

    call dein#add('mattn/webapi-vim', {
          \ 'lazy' : 1,
          \ })
    call dein#add('mattn/gist-vim', {
          \ 'depends' : 'webapi-vim',
          \ 'hook_add' : function('s:hook_add_gist_vim'),
          \ 'hook_source' : function('s:hook_source_gist_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : 'Gist',
          \ })
    " }}}

    " tyru/open-browser.vim {{{
    function! s:hook_source_open_browser_vim() abort
      let g:netrw_nogx = 1
      nmap gx <Plug>(openbrowser-smart-search)
      vmap gx <Plug>(openbrowser-smart-search)
    endfunction

    call dein#add('tyru/open-browser.vim', {
          \ 'hook_source' : function('s:hook_source_open_browser_vim'),
          \ 'lazy' : 1,
          \ 'on_cmd' : [
          \   'OpenBrowser',
          \   'OpenBrowserSearch',
          \   'OpenBrowserSmartSearch',
          \   '<Plug>(openbrowser-',
          \ ],
          \ 'on_map' : 'gx',
          \ })
    " }}}

    " rbtnn/vimconsole.vim {{{
    call dein#add('rbtnn/vimconsole.vim', {
          \ 'lazy' : 1,
          \ 'on_ft' : 'vim',
          \ })
    " }}}

    " vim-jp/vim-go-extra {{{
    function! s:hook_add_vim_go_extra() abort
      " Go編集時はタブにする
      autocmd vimrc FileType go setlocal noexpandtab list tabstop=2 shiftwidth=2
      " Go編集時にerrをハイライトする
      " http://yuroyoro.hatenablog.com/entry/2014/08/12/144157
      highlight goHighlight cterm=bold ctermfg=214
      autocmd vimrc FileType go call matchadd('goHighlight', '\<\%(_\|err\)\>')
      " 末尾のセミコロンをハイライトする
      highlight goSemicolon cterm=bold ctermfg=White ctermbg=Red
      autocmd vimrc FileType go call matchadd('goSemicolon', ';\ze\s*$')
    endfunction

    function! s:hook_post_update_vim_go_extra() abort
      if executable('gocode')
        execute '!go get -u github.com/nsf/gocode'
      endif
      if executable('golint')
        execute '!go get -u github.com/golang/lint/golint'
      endif
    endfunction

    call dein#add('vim-jp/vim-go-extra', {
          \ 'hook_add' : function('s:hook_add_vim_go_extra'),
          \ 'hook_post_update' : function('s:hook_post_update_vim_go_extra'),
          \ 'lazy' : 1,
          \ 'on_ft' : 'go',
          \ })
    " }}}

    " language plugins {{{

    " digitaltoad/vim-pug {{{
    call dein#add('digitaltoad/vim-pug', {
          \ 'lazy' : 1,
          \ 'on_ft' : 'pug',
          \ })
    " }}}

    " hail2u/vim-css3-syntax {{{
    call dein#add('hail2u/vim-css3-syntax', {
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'css',
          \   'html',
          \   'scss',
          \ ],
          \ })
    " }}}

    " othree/html5.vim {{{
    function! s:hook_add_html5_vim() abort
      " *.ejsと*.vueをのファイルタイプをHTMLとする
      autocmd vimrc BufNewFile,BufRead *.{ejs,vue} setlocal filetype=html
    endfunction

    call dein#add('othree/html5.vim', {
          \ 'hook_add' : function('s:hook_add_html5_vim'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'html5',
          \   'php',
          \ ],
          \ })
    " }}}

    " pangloss/vim-javascript {{{
    function! s:hook_source_vim_javascript() abort
      " JSDocのハイライトを有効化する
      let g:javascript_plugin_jsdoc = 1
    endfunction

    call dein#add('pangloss/vim-javascript', {
          \ 'hook_source' : function('s:hook_source_vim_javascript'),
          \ 'lazy' : 1,
          \ 'on_ft' : [
          \   'javascript',
          \   'html',
          \ ],
          \ })
    " }}}

    " }}}

    call dein#end()
  endif

  if dein#check_install()
    call dein#install()
  endif

  " sourceフックを呼ぶ
  call dein#call_hook('source')

  " post_sourceフックを呼ぶようにする
  autocmd vimrc VimEnter * call dein#call_hook('post_source')

  unlet s:plugin_dir
  unlet s:dein_repos

endif

if has('syntax')
  " シンタックスハイライト
  syntax enable
endif

filetype plugin indent on

" }}}

" vim:ft=vim:fdm=marker:fen:
